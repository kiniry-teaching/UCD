
///////////////////////////////////////////////////////////////////////////////
				REASSESSMENT PART ZERO
///////////////////////////////////////////////////////////////////////////////
				
    * (0) Register for the CSI Trac at http://csi-trac.ucd.ie/ 

    * Look into the "reassessment" directory of the SVN repository for the next step of this reassessment. 
    	https://csi-trac.ucd.ie/trac/browser/reassessment 

    * (5) Create eight new To Do task tickets in the CSI Trac that describe the next eight steps of this reassessment. 

The next eight steps are:

   1. Post News announcement.
   2. Obtain initial reassessment archive.
   3. Unpack source code as project and import into SVN.
   4. Identify bugs in project.
   5. Fix bugs in project.
   6. Add new feature to project.
   7. Test project.
   8. Tag and release project. 

The above information should be sufficient for you to both title and summarise each task. Make sure to clearly identify 
that these particular eight tasks are your responsibility.

    * (10) After you complete each of the above steps throughout the rest of this reassessment, update the corresponding 
    task in the appropriate fashion. 

    * (5) Post a News announcement on in the CSI Trac wiki via the ReassessmentAnnouncements wiki page 
    (https://csi-trac.ucd.ie/trac/wiki/ReassessmentAnnouncements) announcing the fact that you are working on the 
    reassessment and are about to begin working on bug fixes. 

///////////////////////////////////////////////////////////////////////////////
							REASSESSMENT PART ONE
///////////////////////////////////////////////////////////////////////////////

    * (0) Download and unpack the archive "Reassessment-2008.zip" archive that is attached to this wiki page. 

    * (0) Using the Eclipse environment provided in COMP20050 (and that is also on the CSI Server—-see the COMP20050 
    Moodle website for details), create a new Eclipse project in which to work on your reassessment. Import the contents 
    of the above archive into this project. 

    * (0) Perform a high-level code review of the provided source code. Get an overall impression about what the project 
    is about, what the primary concepts involved are, what your goals must be, etc. 

    * (10) Write a "Project Overview" for this project following the template provided in the module. Put this document, 
    and all of the following ASCII documents, in the directory "ie/ucd/csi/cards". 

This project overview must be called "<surname>_Project_Overview.txt" where <surname> is your surname. E.g., if I were 
writing the overview, then I must name the file "Kiniry_Project_Overview.txt". This file must be a plain ASCII text file and 
follow the conventions stipulated in the module.

    * (10) Using Eclipse and the provided Subversion plugin, import your project into the CSI Trac under the "reassessment" 
    tree in SVN. Your import must be contained in a directory corresponding to your surname, as above. E.g., for me the SVN 
    path to my project would be, in the end, https://csi-trac.ucd.ie/trac/browser/reassessment/Kiniry/ 

    * (10) After you complete each part of this reassessment, commit your changes to SVN and update your tickets appropriately. 

///////////////////////////////////////////////////////////////////////////////
							REASSESSMENT PART TWO
///////////////////////////////////////////////////////////////////////////////

    * (10) Perform a code review of the "ie.ucd.cs.cards" Java package. While reviewing the code and documentation in detail, 
    write any documentation that you see is missing, particularly Javadocs. Ensure that you use the Javadoc plugin in Eclipse 
    to statically analyze your documentation for completeness and to generate HTML documentation. 

    * (10) Write informal BON charts for this system. These charts must include a BON system chart, cluster chart(s) for all 
    Java packages, and class charts for all Java classes in this project. 

This BON specification must be written in the BON ASCII text format presented in the module, as described in detail in the 
BON textbook provided.

You must ensure that your BON specification is congruent with your Java architecture and its Javadoc documentation, as stipulated
 in the module.

Put all BON charts into a new directory in your project called "bon".

    * (10) Adapt the template Makefile provided to this project. You must ensure that all core rules work properly. 


///////////////////////////////////////////////////////////////////////////////
							REASSESSMENT PART THREE
///////////////////////////////////////////////////////////////////////////////
    * (0) Create an ASCII text file named "<surname>_Bugs.txt" in the top-level of your project. This file will be used to 
    describe each bug that you have found, document your fix, and explain the tests that you write to show the bug is fixed. 

This file should contain multiple sections of the form:

    Bug #X: NAME OF BUG Description: DESCRIPTION OF BUG Fix: DESCRIPTION OF BUG FIX Test: DESCRIPTION OF TEST CASE

Each of the above sections may be up to one paragraph long.

    * (5) Identify at least three bugs in the classes in the ie.ucd.csi.cards Java package. Document these bugs in the source 
    code, preferably with an @bug Javadoc tag, as stipulated in the module. 

More information about the @bug tag, and related tags, is located at

    http://kind.ucd.ie/documents/whitepapers/code_standards/properties.html

Identifying and fixing more than three bugs is to your benefit.

    * (5) Document each bug in the "<surname>_Bugs.txt" file as appropriate. 

    * (10) Correct each bug, then write in the "<surname>_Bugs.txt" file a description of the manner in which you corrected the bug. 

    * (5) Write a small test for each bug fix to show that you have fixed the bug and to help catch the reintroduction of that bug in the 

future. Explain your test in text file as well. 


///////////////////////////////////////////////////////////////////////////////
							REASSESSMENT PART FOUR
///////////////////////////////////////////////////////////////////////////////
    * (30) Add all of the following pieces of functionality to the project. 

    * (5) Write tests for each new piece of functionality you add. 

    * (5) Ensure that you update the Makefile to correspond to any new functionality you might add. 

New specifications:

   1. (15) Write JML specifications (including pre- and postconditions and class invariants) for the PokerCard?, PokerDeck?, 
   and PokerHand? classes. 

   2. Ensure that you run the JML checker plugin to statically check that your JML is correct. 

New functionality:

   1. (10) Implement the PokerCard? class. Consider if any critical methods inherited from its parent classes are missing. 

   2. (10) Implement the PokerDeck? class. Pay particular attention to the getCard() method and its relationship to count(). 

   3. (10) Implement the PokerHand? class. Pay particular attention to the compare() and equal() methods. 

    * If you create or identify any bugs while implementing the above new features, and you do not have the time or ability 
    to fix those bugs 

before the project deadline, summarize them in the above bugs textfile appropriately.

    * (30) Run CheckStyle?, FindBugs?, and PMD on your entire system and correct any serious errors and warnings highlighted 
    to you by this analysis. 

    * (!!!) Your Java source code MUST compile correctly. Java source that does not compile *WILL NOT BE EVALUATED*. 

    * Make sure to commit all of your changes and additions to SVN. 

///////////////////////////////////////////////////////////////////////////////
							REASSESSMENT PART FIVE
///////////////////////////////////////////////////////////////////////////////

    * Archive all of our files (full source, all classfiles, all text files, Makefile, project overview, etc.) in 
    an archive named "<surname>-project.tgz". Please use whatever archive format that you wish. E.g., in this example I 
    presumed that I was using a compressed tar file format, whereas above I provided you with the project as a 

ZIP file.

    * Email the full archive file to Dr. Kiniry at <kiniry@ucd.ie>. Make sure that you remember to include the 
    archive! If you email Dr. Kiniry a blank email or forget the archive he will not be responsible for your omission! 
    Dr. Kiniry will email you back within 24 hours an acknowledgment of your submission. 

THE END 
