// This file was generated by jmlunit on Wed May 06 11:04:55 BST 2009.

package johnny.test;

import johnny.JohnnyCard;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JohnnyCard. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JohnnyCard.java
 * </pre>
 * to regenerate this class whenever JohnnyCard.java changes.
 */
public class JohnnyCard_JML_Test
     extends JohnnyCard_JML_TestData
{
    /** Initialize this class. */
    public JohnnyCard_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JohnnyCard
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JohnnyCard"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JohnnyCard.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JohnnyCard_JML_Test testobj
            = new JohnnyCard_JML_Test("JohnnyCard_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JohnnyCard_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JohnnyCard_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JohnnyCard.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJohnnyCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCash(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetLastFiveTrans(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsLocked(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetUniqueID(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetBank(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestUpdate(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestLock(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestUnlock(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JohnnyCard contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJohnnyCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JohnnyCard");
        try {
            org.jmlspecs.jmlunit.strategies.IntIterator
                vint$1$iter
                = this.vintIter("JohnnyCard", 1);
            this.check_has_data
                (vint$1$iter,
                 "this.vintIter(\"JohnnyCard\", 1)");
            while (!vint$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$2$iter
                    = this.vintIter("JohnnyCard", 0);
                this.check_has_data
                    (vint$2$iter,
                     "this.vintIter(\"JohnnyCard\", 0)");
                while (!vint$2$iter.atEnd()) {
                    final int bankAccNo
                        = vint$1$iter.getInt();
                    final int cardId
                        = vint$2$iter.getInt();
                    methodTests$.addTest
                        (new TestJohnnyCard(bankAccNo, cardId));
                    vint$2$iter.advance();
                }
                vint$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JohnnyCard contructor. */
    protected static class TestJohnnyCard extends OneTest {
        /** Argument bankAccNo */
        private int bankAccNo;
        /** Argument cardId */
        private int cardId;

        /** Initialize this instance. */
        public TestJohnnyCard(int bankAccNo, int cardId) {
            super("JohnnyCard"+ ":" + bankAccNo+ "," +cardId);
            this.bankAccNo = bankAccNo;
            this.cardId = cardId;
        }

        protected void doCall() throws java.lang.Throwable {
            new JohnnyCard(bankAccNo, cardId);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JohnnyCard' applied to";
            msg += "\n\tArgument bankAccNo: " + this.bankAccNo;
            msg += "\n\tArgument cardId: " + this.cardId;
            return msg;
        }
    }

    /** Add tests for the getCash method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCash
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCash");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyCardIter("getCash", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyCardIter(\"getCash\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyCard receiver$
                    = (johnny.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCash(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCash method. */
    protected static class TestGetCash extends OneTest {
        /** The receiver */
        private johnny.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetCash(johnny.JohnnyCard receiver$) {
            super("getCash");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCash();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCash' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getLastFiveTrans method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetLastFiveTrans
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getLastFiveTrans");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyCardIter("getLastFiveTrans", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyCardIter(\"getLastFiveTrans\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyCard receiver$
                    = (johnny.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetLastFiveTrans(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getLastFiveTrans method. */
    protected static class TestGetLastFiveTrans extends OneTest {
        /** The receiver */
        private johnny.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetLastFiveTrans(johnny.JohnnyCard receiver$) {
            super("getLastFiveTrans");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getLastFiveTrans();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getLastFiveTrans' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isLocked method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsLocked
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isLocked");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyCardIter("isLocked", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyCardIter(\"isLocked\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyCard receiver$
                    = (johnny.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsLocked(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isLocked method. */
    protected static class TestIsLocked extends OneTest {
        /** The receiver */
        private johnny.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestIsLocked(johnny.JohnnyCard receiver$) {
            super("isLocked");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isLocked();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isLocked' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getUniqueID method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetUniqueID
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getUniqueID");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyCardIter("getUniqueID", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyCardIter(\"getUniqueID\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyCard receiver$
                    = (johnny.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetUniqueID(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getUniqueID method. */
    protected static class TestGetUniqueID extends OneTest {
        /** The receiver */
        private johnny.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetUniqueID(johnny.JohnnyCard receiver$) {
            super("getUniqueID");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getUniqueID();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getUniqueID' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getBank method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetBank
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getBank");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyCardIter("getBank", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyCardIter(\"getBank\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyCard receiver$
                    = (johnny.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetBank(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getBank method. */
    protected static class TestGetBank extends OneTest {
        /** The receiver */
        private johnny.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetBank(johnny.JohnnyCard receiver$) {
            super("getBank");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getBank();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getBank' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the update method
     * to the overall test suite. */
    private void addTestSuiteFor$TestUpdate
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("update");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyCardIter("update", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyCardIter(\"update\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("update", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"update\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnny.JohnnyCard receiver$
                        = (johnny.JohnnyCard) receivers$iter.get();
                    final int amount
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestUpdate(receiver$, amount));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the update method. */
    protected static class TestUpdate extends OneTest {
        /** The receiver */
        private johnny.JohnnyCard receiver$;
        /** Argument amount */
        private int amount;

        /** Initialize this instance. */
        public TestUpdate(johnny.JohnnyCard receiver$, int amount) {
            super("update"+ ":" + amount);
            this.receiver$ = receiver$;
            this.amount = amount;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.update(amount);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'update' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument amount: " + this.amount;
            return msg;
        }
    }

    /** Add tests for the lock method
     * to the overall test suite. */
    private void addTestSuiteFor$TestLock
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("lock");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyCardIter("lock", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyCardIter(\"lock\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyCard receiver$
                    = (johnny.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestLock(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the lock method. */
    protected static class TestLock extends OneTest {
        /** The receiver */
        private johnny.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestLock(johnny.JohnnyCard receiver$) {
            super("lock");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.lock();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'lock' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the unlock method
     * to the overall test suite. */
    private void addTestSuiteFor$TestUnlock
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("unlock");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyCardIter("unlock", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyCardIter(\"unlock\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyCard receiver$
                    = (johnny.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestUnlock(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the unlock method. */
    protected static class TestUnlock extends OneTest {
        /** The receiver */
        private johnny.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestUnlock(johnny.JohnnyCard receiver$) {
            super("unlock");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.unlock();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'unlock' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
