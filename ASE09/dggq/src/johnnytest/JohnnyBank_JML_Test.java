// This file was generated by jmlunit on Fri May 01 16:01:38 BST 2009.

package johnnytest;

import johnnycash.JohnnyBank;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JohnnyBank. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JohnnyBank.java
 * </pre>
 * to regenerate this class whenever JohnnyBank.java changes.
 */
public class JohnnyBank_JML_Test
     extends JohnnyBank_JML_TestData
{
    /** Initialize this class. */
    public JohnnyBank_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JohnnyBank
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JohnnyBank"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JohnnyBank.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JohnnyBank_JML_Test testobj
            = new JohnnyBank_JML_Test("JohnnyBank_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JohnnyBank_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JohnnyBank_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JohnnyBank.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJohnnyBank(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetJohnnyCardId(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestInitialiseJohnnyCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetJohnnyCardId(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetBankAccountId(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetBankAccountId(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAdjustToBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTransactions(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetTransactions(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAddTransaction(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTransactionCount(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsCorrectPin(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsLoggedIn(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetPin(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetPin(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetDailyAmount(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JohnnyBank contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJohnnyBank
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JohnnyBank");
        try {
            methodTests$.addTest
                (new TestJohnnyBank());
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JohnnyBank contructor. */
    protected static class TestJohnnyBank extends OneTest {

        /** Initialize this instance. */
        public TestJohnnyBank() {
            super("JohnnyBank");
        }

        protected void doCall() throws java.lang.Throwable {
            new JohnnyBank();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JohnnyBank'";
            return msg;
        }
    }

    /** Add tests for the getJohnnyCardId method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetJohnnyCardId
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getJohnnyCardId");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("getJohnnyCardId", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"getJohnnyCardId\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyBank receiver$
                    = (johnnycash.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetJohnnyCardId(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getJohnnyCardId method. */
    protected static class TestGetJohnnyCardId extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetJohnnyCardId(johnnycash.JohnnyBank receiver$) {
            super("getJohnnyCardId");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getJohnnyCardId();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getJohnnyCardId' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the initialiseJohnnyCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestInitialiseJohnnyCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("initialiseJohnnyCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("initialiseJohnnyCard", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"initialiseJohnnyCard\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnnycash_JohnnyCard$1$iter
                    = this.vjohnnycash_JohnnyCardIter("initialiseJohnnyCard", 0);
                this.check_has_data
                    (vjohnnycash_JohnnyCard$1$iter,
                     "this.vjohnnycash_JohnnyCardIter(\"initialiseJohnnyCard\", 0)");
                while (!vjohnnycash_JohnnyCard$1$iter.atEnd()) {
                    final johnnycash.JohnnyBank receiver$
                        = (johnnycash.JohnnyBank) receivers$iter.get();
                    final johnnycash.JohnnyCard theJohnnyCard
                        = (johnnycash.JohnnyCard) vjohnnycash_JohnnyCard$1$iter.get();
                    methodTests$.addTest
                        (new TestInitialiseJohnnyCard(receiver$, theJohnnyCard));
                    vjohnnycash_JohnnyCard$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the initialiseJohnnyCard method. */
    protected static class TestInitialiseJohnnyCard extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;
        /** Argument theJohnnyCard */
        private johnnycash.JohnnyCard theJohnnyCard;

        /** Initialize this instance. */
        public TestInitialiseJohnnyCard(johnnycash.JohnnyBank receiver$, johnnycash.JohnnyCard theJohnnyCard) {
            super("initialiseJohnnyCard"+ ":" + (theJohnnyCard==null? "null" :"{johnnycash.JohnnyCard}"));
            this.receiver$ = receiver$;
            this.theJohnnyCard = theJohnnyCard;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.initialiseJohnnyCard(theJohnnyCard);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'initialiseJohnnyCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theJohnnyCard: " + this.theJohnnyCard;
            return msg;
        }
    }

    /** Add tests for the setJohnnyCardId method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetJohnnyCardId
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setJohnnyCardId");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("setJohnnyCardId", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"setJohnnyCardId\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("setJohnnyCardId", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"setJohnnyCardId\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyBank receiver$
                        = (johnnycash.JohnnyBank) receivers$iter.get();
                    final int theJohnnyCardId
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestSetJohnnyCardId(receiver$, theJohnnyCardId));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setJohnnyCardId method. */
    protected static class TestSetJohnnyCardId extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;
        /** Argument theJohnnyCardId */
        private int theJohnnyCardId;

        /** Initialize this instance. */
        public TestSetJohnnyCardId(johnnycash.JohnnyBank receiver$, int theJohnnyCardId) {
            super("setJohnnyCardId"+ ":" + theJohnnyCardId);
            this.receiver$ = receiver$;
            this.theJohnnyCardId = theJohnnyCardId;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setJohnnyCardId(theJohnnyCardId);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setJohnnyCardId' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theJohnnyCardId: " + this.theJohnnyCardId;
            return msg;
        }
    }

    /** Add tests for the getBankAccountId method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetBankAccountId
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getBankAccountId");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("getBankAccountId", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"getBankAccountId\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyBank receiver$
                    = (johnnycash.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetBankAccountId(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getBankAccountId method. */
    protected static class TestGetBankAccountId extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetBankAccountId(johnnycash.JohnnyBank receiver$) {
            super("getBankAccountId");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getBankAccountId();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getBankAccountId' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setBankAccountId method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetBankAccountId
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setBankAccountId");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("setBankAccountId", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"setBankAccountId\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("setBankAccountId", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"setBankAccountId\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyBank receiver$
                        = (johnnycash.JohnnyBank) receivers$iter.get();
                    final int theBankAccountId
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestSetBankAccountId(receiver$, theBankAccountId));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setBankAccountId method. */
    protected static class TestSetBankAccountId extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;
        /** Argument theBankAccountId */
        private int theBankAccountId;

        /** Initialize this instance. */
        public TestSetBankAccountId(johnnycash.JohnnyBank receiver$, int theBankAccountId) {
            super("setBankAccountId"+ ":" + theBankAccountId);
            this.receiver$ = receiver$;
            this.theBankAccountId = theBankAccountId;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setBankAccountId(theBankAccountId);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setBankAccountId' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theBankAccountId: " + this.theBankAccountId;
            return msg;
        }
    }

    /** Add tests for the getBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("getBalance", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"getBalance\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyBank receiver$
                    = (johnnycash.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetBalance(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getBalance method. */
    protected static class TestGetBalance extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetBalance(johnnycash.JohnnyBank receiver$) {
            super("getBalance");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getBalance();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("setBalance", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"setBalance\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("setBalance", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"setBalance\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyBank receiver$
                        = (johnnycash.JohnnyBank) receivers$iter.get();
                    final int theBalance
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestSetBalance(receiver$, theBalance));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setBalance method. */
    protected static class TestSetBalance extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;
        /** Argument theBalance */
        private int theBalance;

        /** Initialize this instance. */
        public TestSetBalance(johnnycash.JohnnyBank receiver$, int theBalance) {
            super("setBalance"+ ":" + theBalance);
            this.receiver$ = receiver$;
            this.theBalance = theBalance;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setBalance(theBalance);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theBalance: " + this.theBalance;
            return msg;
        }
    }

    /** Add tests for the adjustToBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAdjustToBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("adjustToBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("adjustToBalance", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"adjustToBalance\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("adjustToBalance", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"adjustToBalance\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyBank receiver$
                        = (johnnycash.JohnnyBank) receivers$iter.get();
                    final int amount
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestAdjustToBalance(receiver$, amount));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the adjustToBalance method. */
    protected static class TestAdjustToBalance extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;
        /** Argument amount */
        private int amount;

        /** Initialize this instance. */
        public TestAdjustToBalance(johnnycash.JohnnyBank receiver$, int amount) {
            super("adjustToBalance"+ ":" + amount);
            this.receiver$ = receiver$;
            this.amount = amount;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.adjustToBalance(amount);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'adjustToBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument amount: " + this.amount;
            return msg;
        }
    }

    /** Add tests for the getTransactions method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTransactions
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTransactions");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("getTransactions", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"getTransactions\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyBank receiver$
                    = (johnnycash.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetTransactions(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTransactions method. */
    protected static class TestGetTransactions extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetTransactions(johnnycash.JohnnyBank receiver$) {
            super("getTransactions");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTransactions();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTransactions' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setTransactions method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetTransactions
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setTransactions");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("setTransactions", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"setTransactions\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnnycash_JohnnyTransaction$_$1$iter
                    = this.vjohnnycash_JohnnyTransaction$_Iter("setTransactions", 0);
                this.check_has_data
                    (vjohnnycash_JohnnyTransaction$_$1$iter,
                     "this.vjohnnycash_JohnnyTransaction$_Iter(\"setTransactions\", 0)");
                while (!vjohnnycash_JohnnyTransaction$_$1$iter.atEnd()) {
                    final johnnycash.JohnnyBank receiver$
                        = (johnnycash.JohnnyBank) receivers$iter.get();
                    final johnnycash.JohnnyTransaction[] theTransactions
                        = (johnnycash.JohnnyTransaction[]) vjohnnycash_JohnnyTransaction$_$1$iter.get();
                    methodTests$.addTest
                        (new TestSetTransactions(receiver$, theTransactions));
                    vjohnnycash_JohnnyTransaction$_$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setTransactions method. */
    protected static class TestSetTransactions extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;
        /** Argument theTransactions */
        private johnnycash.JohnnyTransaction[] theTransactions;

        /** Initialize this instance. */
        public TestSetTransactions(johnnycash.JohnnyBank receiver$, johnnycash.JohnnyTransaction[] theTransactions) {
            super("setTransactions"+ ":" + (theTransactions==null?"null":("{johnnycash.JohnnyTransaction["+theTransactions.length + "]"+"}")));
            this.receiver$ = receiver$;
            this.theTransactions = theTransactions;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setTransactions(theTransactions);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setTransactions' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theTransactions: " + this.theTransactions;
            return msg;
        }
    }

    /** Add tests for the addTransaction method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAddTransaction
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("addTransaction");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("addTransaction", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"addTransaction\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnnycash_JohnnyTransaction$1$iter
                    = this.vjohnnycash_JohnnyTransactionIter("addTransaction", 0);
                this.check_has_data
                    (vjohnnycash_JohnnyTransaction$1$iter,
                     "this.vjohnnycash_JohnnyTransactionIter(\"addTransaction\", 0)");
                while (!vjohnnycash_JohnnyTransaction$1$iter.atEnd()) {
                    final johnnycash.JohnnyBank receiver$
                        = (johnnycash.JohnnyBank) receivers$iter.get();
                    final johnnycash.JohnnyTransaction theTransaction
                        = (johnnycash.JohnnyTransaction) vjohnnycash_JohnnyTransaction$1$iter.get();
                    methodTests$.addTest
                        (new TestAddTransaction(receiver$, theTransaction));
                    vjohnnycash_JohnnyTransaction$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the addTransaction method. */
    protected static class TestAddTransaction extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;
        /** Argument theTransaction */
        private johnnycash.JohnnyTransaction theTransaction;

        /** Initialize this instance. */
        public TestAddTransaction(johnnycash.JohnnyBank receiver$, johnnycash.JohnnyTransaction theTransaction) {
            super("addTransaction"+ ":" + (theTransaction==null? "null" :"{johnnycash.JohnnyTransaction}"));
            this.receiver$ = receiver$;
            this.theTransaction = theTransaction;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.addTransaction(theTransaction);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'addTransaction' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theTransaction: " + this.theTransaction;
            return msg;
        }
    }

    /** Add tests for the getTransactionCount method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTransactionCount
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTransactionCount");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("getTransactionCount", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"getTransactionCount\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyBank receiver$
                    = (johnnycash.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetTransactionCount(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTransactionCount method. */
    protected static class TestGetTransactionCount extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetTransactionCount(johnnycash.JohnnyBank receiver$) {
            super("getTransactionCount");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTransactionCount();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTransactionCount' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isCorrectPin method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsCorrectPin
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isCorrectPin");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("isCorrectPin", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"isCorrectPin\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("isCorrectPin", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"isCorrectPin\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyBank receiver$
                        = (johnnycash.JohnnyBank) receivers$iter.get();
                    final int thePin
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestIsCorrectPin(receiver$, thePin));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isCorrectPin method. */
    protected static class TestIsCorrectPin extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;
        /** Argument thePin */
        private int thePin;

        /** Initialize this instance. */
        public TestIsCorrectPin(johnnycash.JohnnyBank receiver$, int thePin) {
            super("isCorrectPin"+ ":" + thePin);
            this.receiver$ = receiver$;
            this.thePin = thePin;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isCorrectPin(thePin);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isCorrectPin' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument thePin: " + this.thePin;
            return msg;
        }
    }

    /** Add tests for the isLoggedIn method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsLoggedIn
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isLoggedIn");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("isLoggedIn", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"isLoggedIn\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyBank receiver$
                    = (johnnycash.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsLoggedIn(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isLoggedIn method. */
    protected static class TestIsLoggedIn extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestIsLoggedIn(johnnycash.JohnnyBank receiver$) {
            super("isLoggedIn");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isLoggedIn();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isLoggedIn' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setPin method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetPin
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setPin");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("setPin", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"setPin\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("setPin", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"setPin\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyBank receiver$
                        = (johnnycash.JohnnyBank) receivers$iter.get();
                    final int thePin
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestSetPin(receiver$, thePin));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setPin method. */
    protected static class TestSetPin extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;
        /** Argument thePin */
        private int thePin;

        /** Initialize this instance. */
        public TestSetPin(johnnycash.JohnnyBank receiver$, int thePin) {
            super("setPin"+ ":" + thePin);
            this.receiver$ = receiver$;
            this.thePin = thePin;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setPin(thePin);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setPin' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument thePin: " + this.thePin;
            return msg;
        }
    }

    /** Add tests for the getPin method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetPin
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getPin");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("getPin", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"getPin\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyBank receiver$
                    = (johnnycash.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetPin(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getPin method. */
    protected static class TestGetPin extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetPin(johnnycash.JohnnyBank receiver$) {
            super("getPin");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getPin();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getPin' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getDailyAmount method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetDailyAmount
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getDailyAmount");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("getDailyAmount", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyBankIter(\"getDailyAmount\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyBank receiver$
                    = (johnnycash.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetDailyAmount(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getDailyAmount method. */
    protected static class TestGetDailyAmount extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetDailyAmount(johnnycash.JohnnyBank receiver$) {
            super("getDailyAmount");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getDailyAmount();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getDailyAmount' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
