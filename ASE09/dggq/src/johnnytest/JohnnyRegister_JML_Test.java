// This file was generated by jmlunit on Fri May 01 16:01:38 BST 2009.

package johnnytest;

import johnnycash.JohnnyRegister;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JohnnyRegister. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JohnnyRegister.java
 * </pre>
 * to regenerate this class whenever JohnnyRegister.java changes.
 */
public class JohnnyRegister_JML_Test
     extends JohnnyRegister_JML_TestData
{
    /** Initialize this class. */
    public JohnnyRegister_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JohnnyRegister
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JohnnyRegister"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JohnnyRegister.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JohnnyRegister_JML_Test testobj
            = new JohnnyRegister_JML_Test("JohnnyRegister_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JohnnyRegister_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JohnnyRegister_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JohnnyRegister.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJohnnyRegister(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetItemCost(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetItemCost(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRequestCost(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTransactions(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetTransactions(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAddTransaction(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetJohnnyCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetJohnnyCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTerminalId(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetTerminalId(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestMoveTransactionsToJohnnyBank(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JohnnyRegister contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJohnnyRegister
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JohnnyRegister");
        try {
            methodTests$.addTest
                (new TestJohnnyRegister());
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JohnnyRegister contructor. */
    protected static class TestJohnnyRegister extends OneTest {

        /** Initialize this instance. */
        public TestJohnnyRegister() {
            super("JohnnyRegister");
        }

        protected void doCall() throws java.lang.Throwable {
            new JohnnyRegister();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JohnnyRegister'";
            return msg;
        }
    }

    /** Add tests for the getItemCost method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetItemCost
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getItemCost");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("getItemCost", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"getItemCost\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyRegister receiver$
                    = (johnnycash.JohnnyRegister) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetItemCost(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getItemCost method. */
    protected static class TestGetItemCost extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;

        /** Initialize this instance. */
        public TestGetItemCost(johnnycash.JohnnyRegister receiver$) {
            super("getItemCost");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getItemCost();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getItemCost' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setItemCost method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetItemCost
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setItemCost");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("setItemCost", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"setItemCost\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("setItemCost", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"setItemCost\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyRegister receiver$
                        = (johnnycash.JohnnyRegister) receivers$iter.get();
                    final int cost
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestSetItemCost(receiver$, cost));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setItemCost method. */
    protected static class TestSetItemCost extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;
        /** Argument cost */
        private int cost;

        /** Initialize this instance. */
        public TestSetItemCost(johnnycash.JohnnyRegister receiver$, int cost) {
            super("setItemCost"+ ":" + cost);
            this.receiver$ = receiver$;
            this.cost = cost;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setItemCost(cost);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setItemCost' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument cost: " + this.cost;
            return msg;
        }
    }

    /** Add tests for the requestCost method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRequestCost
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("requestCost");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("requestCost", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"requestCost\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("requestCost", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"requestCost\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyRegister receiver$
                        = (johnnycash.JohnnyRegister) receivers$iter.get();
                    final int inItemCost
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestRequestCost(receiver$, inItemCost));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the requestCost method. */
    protected static class TestRequestCost extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;
        /** Argument inItemCost */
        private int inItemCost;

        /** Initialize this instance. */
        public TestRequestCost(johnnycash.JohnnyRegister receiver$, int inItemCost) {
            super("requestCost"+ ":" + inItemCost);
            this.receiver$ = receiver$;
            this.inItemCost = inItemCost;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.requestCost(inItemCost);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'requestCost' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument inItemCost: " + this.inItemCost;
            return msg;
        }
    }

    /** Add tests for the getTransactions method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTransactions
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTransactions");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("getTransactions", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"getTransactions\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyRegister receiver$
                    = (johnnycash.JohnnyRegister) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetTransactions(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTransactions method. */
    protected static class TestGetTransactions extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;

        /** Initialize this instance. */
        public TestGetTransactions(johnnycash.JohnnyRegister receiver$) {
            super("getTransactions");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTransactions();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTransactions' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setTransactions method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetTransactions
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setTransactions");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("setTransactions", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"setTransactions\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnnycash_JohnnyTransaction$_$1$iter
                    = this.vjohnnycash_JohnnyTransaction$_Iter("setTransactions", 0);
                this.check_has_data
                    (vjohnnycash_JohnnyTransaction$_$1$iter,
                     "this.vjohnnycash_JohnnyTransaction$_Iter(\"setTransactions\", 0)");
                while (!vjohnnycash_JohnnyTransaction$_$1$iter.atEnd()) {
                    final johnnycash.JohnnyRegister receiver$
                        = (johnnycash.JohnnyRegister) receivers$iter.get();
                    final johnnycash.JohnnyTransaction[] inTransactions
                        = (johnnycash.JohnnyTransaction[]) vjohnnycash_JohnnyTransaction$_$1$iter.get();
                    methodTests$.addTest
                        (new TestSetTransactions(receiver$, inTransactions));
                    vjohnnycash_JohnnyTransaction$_$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setTransactions method. */
    protected static class TestSetTransactions extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;
        /** Argument inTransactions */
        private johnnycash.JohnnyTransaction[] inTransactions;

        /** Initialize this instance. */
        public TestSetTransactions(johnnycash.JohnnyRegister receiver$, johnnycash.JohnnyTransaction[] inTransactions) {
            super("setTransactions"+ ":" + (inTransactions==null?"null":("{johnnycash.JohnnyTransaction["+inTransactions.length + "]"+"}")));
            this.receiver$ = receiver$;
            this.inTransactions = inTransactions;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setTransactions(inTransactions);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setTransactions' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument inTransactions: " + this.inTransactions;
            return msg;
        }
    }

    /** Add tests for the addTransaction method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAddTransaction
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("addTransaction");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("addTransaction", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"addTransaction\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnnycash_JohnnyTransaction$1$iter
                    = this.vjohnnycash_JohnnyTransactionIter("addTransaction", 0);
                this.check_has_data
                    (vjohnnycash_JohnnyTransaction$1$iter,
                     "this.vjohnnycash_JohnnyTransactionIter(\"addTransaction\", 0)");
                while (!vjohnnycash_JohnnyTransaction$1$iter.atEnd()) {
                    final johnnycash.JohnnyRegister receiver$
                        = (johnnycash.JohnnyRegister) receivers$iter.get();
                    final johnnycash.JohnnyTransaction inTransaction
                        = (johnnycash.JohnnyTransaction) vjohnnycash_JohnnyTransaction$1$iter.get();
                    methodTests$.addTest
                        (new TestAddTransaction(receiver$, inTransaction));
                    vjohnnycash_JohnnyTransaction$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the addTransaction method. */
    protected static class TestAddTransaction extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;
        /** Argument inTransaction */
        private johnnycash.JohnnyTransaction inTransaction;

        /** Initialize this instance. */
        public TestAddTransaction(johnnycash.JohnnyRegister receiver$, johnnycash.JohnnyTransaction inTransaction) {
            super("addTransaction"+ ":" + (inTransaction==null? "null" :"{johnnycash.JohnnyTransaction}"));
            this.receiver$ = receiver$;
            this.inTransaction = inTransaction;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.addTransaction(inTransaction);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'addTransaction' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument inTransaction: " + this.inTransaction;
            return msg;
        }
    }

    /** Add tests for the getJohnnyCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetJohnnyCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getJohnnyCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("getJohnnyCard", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"getJohnnyCard\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyRegister receiver$
                    = (johnnycash.JohnnyRegister) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetJohnnyCard(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getJohnnyCard method. */
    protected static class TestGetJohnnyCard extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;

        /** Initialize this instance. */
        public TestGetJohnnyCard(johnnycash.JohnnyRegister receiver$) {
            super("getJohnnyCard");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getJohnnyCard();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getJohnnyCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setJohnnyCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetJohnnyCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setJohnnyCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("setJohnnyCard", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"setJohnnyCard\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnnycash_JohnnyCard$1$iter
                    = this.vjohnnycash_JohnnyCardIter("setJohnnyCard", 0);
                this.check_has_data
                    (vjohnnycash_JohnnyCard$1$iter,
                     "this.vjohnnycash_JohnnyCardIter(\"setJohnnyCard\", 0)");
                while (!vjohnnycash_JohnnyCard$1$iter.atEnd()) {
                    final johnnycash.JohnnyRegister receiver$
                        = (johnnycash.JohnnyRegister) receivers$iter.get();
                    final johnnycash.JohnnyCard inJohnnyCard
                        = (johnnycash.JohnnyCard) vjohnnycash_JohnnyCard$1$iter.get();
                    methodTests$.addTest
                        (new TestSetJohnnyCard(receiver$, inJohnnyCard));
                    vjohnnycash_JohnnyCard$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setJohnnyCard method. */
    protected static class TestSetJohnnyCard extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;
        /** Argument inJohnnyCard */
        private johnnycash.JohnnyCard inJohnnyCard;

        /** Initialize this instance. */
        public TestSetJohnnyCard(johnnycash.JohnnyRegister receiver$, johnnycash.JohnnyCard inJohnnyCard) {
            super("setJohnnyCard"+ ":" + (inJohnnyCard==null? "null" :"{johnnycash.JohnnyCard}"));
            this.receiver$ = receiver$;
            this.inJohnnyCard = inJohnnyCard;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setJohnnyCard(inJohnnyCard);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setJohnnyCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument inJohnnyCard: " + this.inJohnnyCard;
            return msg;
        }
    }

    /** Add tests for the getTerminalId method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTerminalId
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTerminalId");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("getTerminalId", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"getTerminalId\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyRegister receiver$
                    = (johnnycash.JohnnyRegister) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetTerminalId(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTerminalId method. */
    protected static class TestGetTerminalId extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;

        /** Initialize this instance. */
        public TestGetTerminalId(johnnycash.JohnnyRegister receiver$) {
            super("getTerminalId");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTerminalId();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTerminalId' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setTerminalId method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetTerminalId
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setTerminalId");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("setTerminalId", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"setTerminalId\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("setTerminalId", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"setTerminalId\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyRegister receiver$
                        = (johnnycash.JohnnyRegister) receivers$iter.get();
                    final int inTerminalId
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestSetTerminalId(receiver$, inTerminalId));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setTerminalId method. */
    protected static class TestSetTerminalId extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;
        /** Argument inTerminalId */
        private int inTerminalId;

        /** Initialize this instance. */
        public TestSetTerminalId(johnnycash.JohnnyRegister receiver$, int inTerminalId) {
            super("setTerminalId"+ ":" + inTerminalId);
            this.receiver$ = receiver$;
            this.inTerminalId = inTerminalId;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setTerminalId(inTerminalId);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setTerminalId' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument inTerminalId: " + this.inTerminalId;
            return msg;
        }
    }

    /** Add tests for the moveTransactionsToJohnnyBank method
     * to the overall test suite. */
    private void addTestSuiteFor$TestMoveTransactionsToJohnnyBank
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("moveTransactionsToJohnnyBank");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyRegisterIter("moveTransactionsToJohnnyBank", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyRegisterIter(\"moveTransactionsToJohnnyBank\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnnycash_JohnnyBank$1$iter
                    = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyBankIter("moveTransactionsToJohnnyBank", 0));
                this.check_has_data
                    (vjohnnycash_JohnnyBank$1$iter,
                     "this.vjohnnycash_JohnnyBankIter(\"moveTransactionsToJohnnyBank\", 0)");
                while (!vjohnnycash_JohnnyBank$1$iter.atEnd()) {
                    final johnnycash.JohnnyRegister receiver$
                        = (johnnycash.JohnnyRegister) receivers$iter.get();
                    final johnnycash.JohnnyBank johnnyBank
                        = (johnnycash.JohnnyBank) vjohnnycash_JohnnyBank$1$iter.get();
                    methodTests$.addTest
                        (new TestMoveTransactions(receiver$, johnnyBank));
                    vjohnnycash_JohnnyBank$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the moveTransactionsToJohnnyBank method. */
    protected static class TestMoveTransactions extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyRegister receiver$;
        /** Argument johnnyBank */
        private johnnycash.JohnnyBank johnnyBank;

        /** Initialize this instance. */
        public TestMoveTransactions(johnnycash.JohnnyRegister receiver$, johnnycash.JohnnyBank johnnyBank) {
            super("moveTransactions"+ ":" + (johnnyBank==null? "null" :"{johnnycash.JohnnyBank}"));
            this.receiver$ = receiver$;
            this.johnnyBank = johnnyBank;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.moveTransactions(johnnyBank);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'moveTransactions' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument johnnyBank: " + this.johnnyBank;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
