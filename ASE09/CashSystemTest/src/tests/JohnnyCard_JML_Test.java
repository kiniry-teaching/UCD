// This file was generated by jmlunit on Sun May 10 22:14:55 BST 2009.

package tests;

import cashsystem.*;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JohnnyCard. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JohnnyCard.java
 * </pre>
 * to regenerate this class whenever JohnnyCard.java changes.
 */
public class JohnnyCard_JML_Test
     extends JohnnyCard_JML_TestData
{
    /** Initialize this class. */
    public JohnnyCard_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JohnnyCard
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JohnnyCard"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JohnnyCard.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JohnnyCard_JML_Test testobj
            = new JohnnyCard_JML_Test("JohnnyCard_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JohnnyCard_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JohnnyCard_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JohnnyCard.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJohnnyCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetLastTransactions(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsLocked(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetMaxCredit(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetPin(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetAccountId(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestUpdateBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestLock(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestUnlock(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JohnnyCard contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJohnnyCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JohnnyCard");
        try {
            org.jmlspecs.jmlunit.strategies.IntIterator
                vint$1$iter
                = this.vintIter("JohnnyCard", 1);
            this.check_has_data
                (vint$1$iter,
                 "this.vintIter(\"JohnnyCard\", 1)");
            while (!vint$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$2$iter
                    = this.vintIter("JohnnyCard", 0);
                this.check_has_data
                    (vint$2$iter,
                     "this.vintIter(\"JohnnyCard\", 0)");
                while (!vint$2$iter.atEnd()) {
                    final int bank_number
                        = vint$1$iter.getInt();
                    final int new_pin
                        = vint$2$iter.getInt();
                    methodTests$.addTest
                        (new TestJohnnyCard(bank_number, new_pin));
                    vint$2$iter.advance();
                }
                vint$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JohnnyCard contructor. */
    protected static class TestJohnnyCard extends OneTest {
        /** Argument bank_number */
        private int bank_number;
        /** Argument new_pin */
        private int new_pin;

        /** Initialize this instance. */
        public TestJohnnyCard(int bank_number, int new_pin) {
            super("JohnnyCard"+ ":" + bank_number+ "," +new_pin);
            this.bank_number = bank_number;
            this.new_pin = new_pin;
        }

        protected void doCall() throws java.lang.Throwable {
            new JohnnyCard(bank_number, new_pin);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JohnnyCard' applied to";
            msg += "\n\tArgument bank_number: " + this.bank_number;
            msg += "\n\tArgument new_pin: " + this.new_pin;
            return msg;
        }
    }

    /** Add tests for the getBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyCardIter("getBalance", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyCardIter(\"getBalance\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyCard receiver$
                    = (cashsystem.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetBalance(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getBalance method. */
    protected static class TestGetBalance extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetBalance(cashsystem.JohnnyCard receiver$) {
            super("getBalance");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getBalance();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getLastTransactions method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetLastTransactions
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getLastTransactions");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyCardIter("getLastTransactions", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyCardIter(\"getLastTransactions\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyCard receiver$
                    = (cashsystem.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetLastTransactions(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getLastTransactions method. */
    protected static class TestGetLastTransactions extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetLastTransactions(cashsystem.JohnnyCard receiver$) {
            super("getLastTransactions");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getLastTransactions();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getLastTransactions' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isLocked method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsLocked
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isLocked");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyCardIter("isLocked", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyCardIter(\"isLocked\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyCard receiver$
                    = (cashsystem.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsLocked(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isLocked method. */
    protected static class TestIsLocked extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestIsLocked(cashsystem.JohnnyCard receiver$) {
            super("isLocked");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isLocked();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isLocked' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getMaxCredit method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetMaxCredit
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getMaxCredit");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyCardIter("getMaxCredit", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyCardIter(\"getMaxCredit\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyCard receiver$
                    = (cashsystem.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetMaxCredit(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getMaxCredit method. */
    protected static class TestGetMaxCredit extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetMaxCredit(cashsystem.JohnnyCard receiver$) {
            super("getMaxCredit");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getMaxCredit();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getMaxCredit' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getPin method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetPin
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getPin");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyCardIter("getPin", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyCardIter(\"getPin\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyCard receiver$
                    = (cashsystem.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetPin(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getPin method. */
    protected static class TestGetPin extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetPin(cashsystem.JohnnyCard receiver$) {
            super("getPin");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getPin();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getPin' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getAccountId method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetAccountId
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getAccountId");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyCardIter("getAccountId", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyCardIter(\"getAccountId\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyCard receiver$
                    = (cashsystem.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetAccountId(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getAccountId method. */
    protected static class TestGetAccountId extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetAccountId(cashsystem.JohnnyCard receiver$) {
            super("getAccountId");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getAccountId();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getAccountId' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the updateBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestUpdateBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("updateBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyCardIter("updateBalance", 3));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyCardIter(\"updateBalance\", 3))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("updateBalance", 2);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"updateBalance\", 2)");
                while (!vint$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        vjava_lang_String$2$iter
                        = this.vjava_lang_StringIter("updateBalance", 1);
                    this.check_has_data
                        (vjava_lang_String$2$iter,
                         "this.vjava_lang_StringIter(\"updateBalance\", 1)");
                    while (!vjava_lang_String$2$iter.atEnd()) {
                        org.jmlspecs.jmlunit.strategies.LongIterator
                            vlong$3$iter
                            = this.vlongIter("updateBalance", 0);
                        this.check_has_data
                            (vlong$3$iter,
                             "this.vlongIter(\"updateBalance\", 0)");
                        while (!vlong$3$iter.atEnd()) {
                            final cashsystem.JohnnyCard receiver$
                                = (cashsystem.JohnnyCard) receivers$iter.get();
                            final int amount
                                = vint$1$iter.getInt();
                            final java.lang.String location
                                = (java.lang.String) vjava_lang_String$2$iter.get();
                            final long timestamp
                                = vlong$3$iter.getLong();
                            methodTests$.addTest
                                (new TestUpdateBalance(receiver$, amount, location, timestamp));
                            vlong$3$iter.advance();
                        }
                        vjava_lang_String$2$iter.advance();
                    }
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the updateBalance method. */
    protected static class TestUpdateBalance extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyCard receiver$;
        /** Argument amount */
        private int amount;
        /** Argument location */
        private java.lang.String location;
        /** Argument timestamp */
        private long timestamp;

        /** Initialize this instance. */
        public TestUpdateBalance(cashsystem.JohnnyCard receiver$, int amount, java.lang.String location, long timestamp) {
            super("updateBalance"+ ":" + amount+ "," +(location==null? "null" :("\""+location+"\""))+ "," +timestamp);
            this.receiver$ = receiver$;
            this.amount = amount;
            this.location = location;
            this.timestamp = timestamp;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.updateBalance(amount, location, timestamp);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'updateBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument amount: " + this.amount;
            msg += "\n\tArgument location: " + this.location;
            msg += "\n\tArgument timestamp: " + this.timestamp;
            return msg;
        }
    }

    /** Add tests for the lock method
     * to the overall test suite. */
    private void addTestSuiteFor$TestLock
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("lock");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyCardIter("lock", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyCardIter(\"lock\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyCard receiver$
                    = (cashsystem.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestLock(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the lock method. */
    protected static class TestLock extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestLock(cashsystem.JohnnyCard receiver$) {
            super("lock");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.lock();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'lock' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the unlock method
     * to the overall test suite. */
    private void addTestSuiteFor$TestUnlock
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("unlock");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyCardIter("unlock", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyCardIter(\"unlock\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyCard receiver$
                    = (cashsystem.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestUnlock(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the unlock method. */
    protected static class TestUnlock extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestUnlock(cashsystem.JohnnyCard receiver$) {
            super("unlock");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.unlock();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'unlock' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
