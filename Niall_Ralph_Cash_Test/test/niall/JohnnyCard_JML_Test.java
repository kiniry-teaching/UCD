// This file was generated by jmlunit on Thu May 07 20:07:37 BST 2009.

package niall;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JohnnyCard. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JohnnyCard.java
 * </pre>
 * to regenerate this class whenever JohnnyCard.java changes.
 */
public class JohnnyCard_JML_Test
     extends JohnnyCard_JML_TestData
{
    /** Initialize this class. */
    public JohnnyCard_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JohnnyCard
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JohnnyCard"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JohnnyCard.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JohnnyCard_JML_Test testobj
            = new JohnnyCard_JML_Test("JohnnyCard_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JohnnyCard_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JohnnyCard_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JohnnyCard.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJohnnyCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCashBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTransactions(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsLocked(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetBankAccount(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestUpdateCashBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRecordTransaction(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetLocked(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JohnnyCard contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJohnnyCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JohnnyCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vniall_JohnnyBank$1$iter
                = this.vniall_JohnnyBankIter("JohnnyCard", 0);
            this.check_has_data
                (vniall_JohnnyBank$1$iter,
                 "this.vniall_JohnnyBankIter(\"JohnnyCard\", 0)");
            while (!vniall_JohnnyBank$1$iter.atEnd()) {
                final niall.JohnnyBank theBankAccount
                    = (niall.JohnnyBank) vniall_JohnnyBank$1$iter.get();
                methodTests$.addTest
                    (new TestJohnnyCard(theBankAccount));
                vniall_JohnnyBank$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JohnnyCard contructor. */
    protected static class TestJohnnyCard extends OneTest {
        /** Argument theBankAccount */
        private niall.JohnnyBank theBankAccount;

        /** Initialize this instance. */
        public TestJohnnyCard(niall.JohnnyBank theBankAccount) {
            super("JohnnyCard"+ ":" + (theBankAccount==null? "null" :"{niall.JohnnyBank}"));
            this.theBankAccount = theBankAccount;
        }

        protected void doCall() throws java.lang.Throwable {
            new JohnnyCard(theBankAccount);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JohnnyCard' applied to";
            msg += "\n\tArgument theBankAccount: " + this.theBankAccount;
            return msg;
        }
    }

    /** Add tests for the getCashBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCashBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCashBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyCardIter("getCashBalance", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyCardIter(\"getCashBalance\", 0))");
            while (!receivers$iter.atEnd()) {
                final niall.JohnnyCard receiver$
                    = (niall.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCashBalance(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCashBalance method. */
    protected static class TestGetCashBalance extends OneTest {
        /** The receiver */
        private niall.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetCashBalance(niall.JohnnyCard receiver$) {
            super("getCashBalance");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCashBalance();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCashBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getTransactions method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTransactions
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTransactions");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyCardIter("getTransactions", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyCardIter(\"getTransactions\", 0))");
            while (!receivers$iter.atEnd()) {
                final niall.JohnnyCard receiver$
                    = (niall.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetTransactions(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTransactions method. */
    protected static class TestGetTransactions extends OneTest {
        /** The receiver */
        private niall.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetTransactions(niall.JohnnyCard receiver$) {
            super("getTransactions");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTransactions();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTransactions' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isLocked method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsLocked
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isLocked");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyCardIter("isLocked", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyCardIter(\"isLocked\", 0))");
            while (!receivers$iter.atEnd()) {
                final niall.JohnnyCard receiver$
                    = (niall.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsLocked(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isLocked method. */
    protected static class TestIsLocked extends OneTest {
        /** The receiver */
        private niall.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestIsLocked(niall.JohnnyCard receiver$) {
            super("isLocked");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isLocked();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isLocked' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getBankAccount method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetBankAccount
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getBankAccount");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyCardIter("getBankAccount", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyCardIter(\"getBankAccount\", 0))");
            while (!receivers$iter.atEnd()) {
                final niall.JohnnyCard receiver$
                    = (niall.JohnnyCard) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetBankAccount(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getBankAccount method. */
    protected static class TestGetBankAccount extends OneTest {
        /** The receiver */
        private niall.JohnnyCard receiver$;

        /** Initialize this instance. */
        public TestGetBankAccount(niall.JohnnyCard receiver$) {
            super("getBankAccount");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getBankAccount();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getBankAccount' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the updateCashBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestUpdateCashBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("updateCashBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyCardIter("updateCashBalance", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyCardIter(\"updateCashBalance\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("updateCashBalance", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"updateCashBalance\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final niall.JohnnyCard receiver$
                        = (niall.JohnnyCard) receivers$iter.get();
                    final int theCashValue
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestUpdateCashBalance(receiver$, theCashValue));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the updateCashBalance method. */
    protected static class TestUpdateCashBalance extends OneTest {
        /** The receiver */
        private niall.JohnnyCard receiver$;
        /** Argument theCashValue */
        private int theCashValue;

        /** Initialize this instance. */
        public TestUpdateCashBalance(niall.JohnnyCard receiver$, int theCashValue) {
            super("updateCashBalance"+ ":" + theCashValue);
            this.receiver$ = receiver$;
            this.theCashValue = theCashValue;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.updateCashBalance(theCashValue);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'updateCashBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theCashValue: " + this.theCashValue;
            return msg;
        }
    }

    /** Add tests for the recordTransaction method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRecordTransaction
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("recordTransaction");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyCardIter("recordTransaction", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyCardIter(\"recordTransaction\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vniall_JohnnyTrannie$1$iter
                    = this.vniall_JohnnyTrannieIter("recordTransaction", 0);
                this.check_has_data
                    (vniall_JohnnyTrannie$1$iter,
                     "this.vniall_JohnnyTrannieIter(\"recordTransaction\", 0)");
                while (!vniall_JohnnyTrannie$1$iter.atEnd()) {
                    final niall.JohnnyCard receiver$
                        = (niall.JohnnyCard) receivers$iter.get();
                    final niall.JohnnyTrannie theTransaction
                        = (niall.JohnnyTrannie) vniall_JohnnyTrannie$1$iter.get();
                    methodTests$.addTest
                        (new TestRecordTransaction(receiver$, theTransaction));
                    vniall_JohnnyTrannie$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the recordTransaction method. */
    protected static class TestRecordTransaction extends OneTest {
        /** The receiver */
        private niall.JohnnyCard receiver$;
        /** Argument theTransaction */
        private niall.JohnnyTrannie theTransaction;

        /** Initialize this instance. */
        public TestRecordTransaction(niall.JohnnyCard receiver$, niall.JohnnyTrannie theTransaction) {
            super("recordTransaction"+ ":" + (theTransaction==null? "null" :"{niall.JohnnyTrannie}"));
            this.receiver$ = receiver$;
            this.theTransaction = theTransaction;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.recordTransaction(theTransaction);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'recordTransaction' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theTransaction: " + this.theTransaction;
            return msg;
        }
    }

    /** Add tests for the setLocked method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetLocked
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setLocked");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyCardIter("setLocked", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyCardIter(\"setLocked\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.BooleanIterator
                    vboolean$1$iter
                    = this.vbooleanIter("setLocked", 0);
                this.check_has_data
                    (vboolean$1$iter,
                     "this.vbooleanIter(\"setLocked\", 0)");
                while (!vboolean$1$iter.atEnd()) {
                    final niall.JohnnyCard receiver$
                        = (niall.JohnnyCard) receivers$iter.get();
                    final boolean theLockStatus
                        = vboolean$1$iter.getBoolean();
                    methodTests$.addTest
                        (new TestSetLocked(receiver$, theLockStatus));
                    vboolean$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setLocked method. */
    protected static class TestSetLocked extends OneTest {
        /** The receiver */
        private niall.JohnnyCard receiver$;
        /** Argument theLockStatus */
        private boolean theLockStatus;

        /** Initialize this instance. */
        public TestSetLocked(niall.JohnnyCard receiver$, boolean theLockStatus) {
            super("setLocked"+ ":" + theLockStatus);
            this.receiver$ = receiver$;
            this.theLockStatus = theLockStatus;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setLocked(theLockStatus);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setLocked' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theLockStatus: " + this.theLockStatus;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
