// This file was generated by jmlunit on Thu May 07 20:07:37 BST 2009.

package niall;


/** Automatically-generated test driver for JML and JUnit based
 * testing of JohnnyTrannie. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JohnnyTrannie.java
 * </pre>
 * to regenerate this class whenever JohnnyTrannie.java changes.
 */
public class JohnnyTrannie_JML_Test
     extends JohnnyTrannie_JML_TestData
{
    /** Initialize this class. */
    public JohnnyTrannie_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JohnnyTrannie
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
    	//This test does not work with the current JML compiler
        /*junit.framework.Assert.assertTrue("code for class JohnnyTrannie"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JohnnyTrannie.class)
            );*/
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JohnnyTrannie_JML_Test testobj
            = new JohnnyTrannie_JML_Test("JohnnyTrannie_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JohnnyTrannie_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JohnnyTrannie_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JohnnyTrannie.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestGetDate(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetAmount(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTransactionType(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestJohnnyTrannie(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the getDate method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetDate
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getDate");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyTrannieIter("getDate", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyTrannieIter(\"getDate\", 0))");
            while (!receivers$iter.atEnd()) {
                final niall.JohnnyTrannie receiver$
                    = (niall.JohnnyTrannie) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetDate(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getDate method. */
    protected static class TestGetDate extends OneTest {
        /** The receiver */
        private niall.JohnnyTrannie receiver$;

        /** Initialize this instance. */
        public TestGetDate(niall.JohnnyTrannie receiver$) {
            super("getDate");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getDate();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getDate' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getAmount method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetAmount
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getAmount");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyTrannieIter("getAmount", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyTrannieIter(\"getAmount\", 0))");
            while (!receivers$iter.atEnd()) {
                final niall.JohnnyTrannie receiver$
                    = (niall.JohnnyTrannie) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetAmount(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getAmount method. */
    protected static class TestGetAmount extends OneTest {
        /** The receiver */
        private niall.JohnnyTrannie receiver$;

        /** Initialize this instance. */
        public TestGetAmount(niall.JohnnyTrannie receiver$) {
            super("getAmount");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getAmount();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getAmount' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyTrannieIter("getCard", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyTrannieIter(\"getCard\", 0))");
            while (!receivers$iter.atEnd()) {
                final niall.JohnnyTrannie receiver$
                    = (niall.JohnnyTrannie) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCard(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCard method. */
    protected static class TestGetCard extends OneTest {
        /** The receiver */
        private niall.JohnnyTrannie receiver$;

        /** Initialize this instance. */
        public TestGetCard(niall.JohnnyTrannie receiver$) {
            super("getCard");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCard();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getTransactionType method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTransactionType
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTransactionType");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vniall_JohnnyTrannieIter("getTransactionType", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vniall_JohnnyTrannieIter(\"getTransactionType\", 0))");
            while (!receivers$iter.atEnd()) {
                final niall.JohnnyTrannie receiver$
                    = (niall.JohnnyTrannie) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetTransactionType(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTransactionType method. */
    protected static class TestGetTransactionType extends OneTest {
        /** The receiver */
        private niall.JohnnyTrannie receiver$;

        /** Initialize this instance. */
        public TestGetTransactionType(niall.JohnnyTrannie receiver$) {
            super("getTransactionType");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTransactionType();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTransactionType' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the JohnnyTrannie contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJohnnyTrannie
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JohnnyTrannie");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vniall_JohnnyCard$1$iter
                = this.vniall_JohnnyCardIter("JohnnyTrannie", 3);
            this.check_has_data
                (vniall_JohnnyCard$1$iter,
                 "this.vniall_JohnnyCardIter(\"JohnnyTrannie\", 3)");
            while (!vniall_JohnnyCard$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$2$iter
                    = this.vintIter("JohnnyTrannie", 2);
                this.check_has_data
                    (vint$2$iter,
                     "this.vintIter(\"JohnnyTrannie\", 2)");
                while (!vint$2$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        vjava_util_Date$3$iter
                        = this.vjava_util_DateIter("JohnnyTrannie", 1);
                    this.check_has_data
                        (vjava_util_Date$3$iter,
                         "this.vjava_util_DateIter(\"JohnnyTrannie\", 1)");
                    while (!vjava_util_Date$3$iter.atEnd()) {
                        org.jmlspecs.jmlunit.strategies.CharIterator
                            vchar$4$iter
                            = this.vcharIter("JohnnyTrannie", 0);
                        this.check_has_data
                            (vchar$4$iter,
                             "this.vcharIter(\"JohnnyTrannie\", 0)");
                        while (!vchar$4$iter.atEnd()) {
                            final niall.JohnnyCard theCard
                                = (niall.JohnnyCard) vniall_JohnnyCard$1$iter.get();
                            final int theAmount
                                = vint$2$iter.getInt();
                            final java.util.Date theDate
                                = (java.util.Date) vjava_util_Date$3$iter.get();
                            final char transType
                                = vchar$4$iter.getChar();
                            methodTests$.addTest
                                (new TestJohnnyTrannie(theCard, theAmount, theDate, transType));
                            vchar$4$iter.advance();
                        }
                        vjava_util_Date$3$iter.advance();
                    }
                    vint$2$iter.advance();
                }
                vniall_JohnnyCard$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JohnnyTrannie contructor. */
    protected static class TestJohnnyTrannie extends OneTest {
        /** Argument theCard */
        private niall.JohnnyCard theCard;
        /** Argument theAmount */
        private int theAmount;
        /** Argument theDate */
        private java.util.Date theDate;
        /** Argument transType */
        private char transType;

        /** Initialize this instance. */
        public TestJohnnyTrannie(niall.JohnnyCard theCard, int theAmount, java.util.Date theDate, char transType) {
            super("JohnnyTrannie"+ ":" + (theCard==null? "null" :"{niall.JohnnyCard}")+ "," +theAmount+ "," +(theDate==null? "null" :"{java.util.Date}")+ "," +"\'"+charToString(transType)+"\'");
            this.theCard = theCard;
            this.theAmount = theAmount;
            this.theDate = theDate;
            this.transType = transType;
        }

        protected void doCall() throws java.lang.Throwable {
            new JohnnyTrannie(theCard, theAmount, theDate, transType);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JohnnyTrannie' applied to";
            msg += "\n\tArgument theCard: " + this.theCard;
            msg += "\n\tArgument theAmount: " + this.theAmount;
            msg += "\n\tArgument theDate: " + this.theDate;
            msg += "\n\tArgument transType: " + this.transType;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
