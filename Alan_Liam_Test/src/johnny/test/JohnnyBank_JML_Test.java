// This file was generated by jmlunit on Wed May 06 11:02:45 BST 2009.

package johnny.test;

import johnny.JohnnyBank;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JohnnyBank. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JohnnyBank.java
 * </pre>
 * to regenerate this class whenever JohnnyBank.java changes.
 */
public class JohnnyBank_JML_Test
     extends JohnnyBank_JML_TestData
{
    /** Initialize this class. */
    public JohnnyBank_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JohnnyBank
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JohnnyBank"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JohnnyBank.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JohnnyBank_JML_Test testobj
            = new JohnnyBank_JML_Test("JohnnyBank_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JohnnyBank_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JohnnyBank_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JohnnyBank.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJohnnyBank(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestVerifyPin(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCards(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetDailyTotal(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetBankBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetBank(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetAccountNumber(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestUpdateBankBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAddCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestUnlockCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestUpdateDailyTotal(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestResetDailyTotal(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JohnnyBank contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJohnnyBank
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JohnnyBank");
        try {
            org.jmlspecs.jmlunit.strategies.IntIterator
                vint$1$iter
                = this.vintIter("JohnnyBank", 1);
            this.check_has_data
                (vint$1$iter,
                 "this.vintIter(\"JohnnyBank\", 1)");
            while (!vint$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vint$_$2$iter
                    = this.vint$_Iter("JohnnyBank", 0);
                this.check_has_data
                    (vint$_$2$iter,
                     "this.vint$_Iter(\"JohnnyBank\", 0)");
                while (!vint$_$2$iter.atEnd()) {
                    final int newBank
                        = vint$1$iter.getInt();
                    final int[] newPin
                        = (int[]) vint$_$2$iter.get();
                    methodTests$.addTest
                        (new TestJohnnyBank(newBank, newPin));
                    vint$_$2$iter.advance();
                }
                vint$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JohnnyBank contructor. */
    protected static class TestJohnnyBank extends OneTest {
        /** Argument newBank */
        private int newBank;
        /** Argument newPin */
        private int[] newPin;

        /** Initialize this instance. */
        public TestJohnnyBank(int newBank, int[] newPin) {
            super("JohnnyBank"+ ":" + newBank+ "," +(newPin==null?"null":("{int["+newPin.length + "]"+"}")));
            this.newBank = newBank;
            this.newPin = newPin;
        }

        protected void doCall() throws java.lang.Throwable {
            new JohnnyBank(newBank, newPin);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JohnnyBank' applied to";
            msg += "\n\tArgument newBank: " + this.newBank;
            msg += "\n\tArgument newPin: " + this.newPin;
            return msg;
        }
    }

    /** Add tests for the verifyPin method
     * to the overall test suite. */
    private void addTestSuiteFor$TestVerifyPin
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("verifyPin");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("verifyPin", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"verifyPin\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vint$_$1$iter
                    = this.vint$_Iter("verifyPin", 0);
                this.check_has_data
                    (vint$_$1$iter,
                     "this.vint$_Iter(\"verifyPin\", 0)");
                while (!vint$_$1$iter.atEnd()) {
                    final johnny.JohnnyBank receiver$
                        = (johnny.JohnnyBank) receivers$iter.get();
                    final int[] pinEntered
                        = (int[]) vint$_$1$iter.get();
                    methodTests$.addTest
                        (new TestVerifyPin(receiver$, pinEntered));
                    vint$_$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the verifyPin method. */
    protected static class TestVerifyPin extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;
        /** Argument pinEntered */
        private int[] pinEntered;

        /** Initialize this instance. */
        public TestVerifyPin(johnny.JohnnyBank receiver$, int[] pinEntered) {
            super("verifyPin"+ ":" + (pinEntered==null?"null":("{int["+pinEntered.length + "]"+"}")));
            this.receiver$ = receiver$;
            this.pinEntered = pinEntered;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.verifyPin(pinEntered);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'verifyPin' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument pinEntered: " + this.pinEntered;
            return msg;
        }
    }

    /** Add tests for the getCards method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCards
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCards");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("getCards", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"getCards\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyBank receiver$
                    = (johnny.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCards(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCards method. */
    protected static class TestGetCards extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetCards(johnny.JohnnyBank receiver$) {
            super("getCards");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCards();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCards' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getDailyTotal method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetDailyTotal
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getDailyTotal");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("getDailyTotal", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"getDailyTotal\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyBank receiver$
                    = (johnny.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetDailyTotal(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getDailyTotal method. */
    protected static class TestGetDailyTotal extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetDailyTotal(johnny.JohnnyBank receiver$) {
            super("getDailyTotal");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getDailyTotal();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getDailyTotal' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getBankBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetBankBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getBankBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("getBankBalance", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"getBankBalance\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyBank receiver$
                    = (johnny.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetBankBalance(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getBankBalance method. */
    protected static class TestGetBankBalance extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetBankBalance(johnny.JohnnyBank receiver$) {
            super("getBankBalance");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getBankBalance();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getBankBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getBank method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetBank
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getBank");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("getBank", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"getBank\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyBank receiver$
                    = (johnny.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetBank(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getBank method. */
    protected static class TestGetBank extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetBank(johnny.JohnnyBank receiver$) {
            super("getBank");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getBank();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getBank' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getAccountNumber method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetAccountNumber
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getAccountNumber");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("getAccountNumber", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"getAccountNumber\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyBank receiver$
                    = (johnny.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetAccountNumber(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getAccountNumber method. */
    protected static class TestGetAccountNumber extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestGetAccountNumber(johnny.JohnnyBank receiver$) {
            super("getAccountNumber");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getAccountNumber();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getAccountNumber' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the updateBankBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestUpdateBankBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("updateBankBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("updateBankBalance", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"updateBankBalance\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("updateBankBalance", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"updateBankBalance\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnny.JohnnyBank receiver$
                        = (johnny.JohnnyBank) receivers$iter.get();
                    final int amount
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestUpdateBankBalance(receiver$, amount));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the updateBankBalance method. */
    protected static class TestUpdateBankBalance extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;
        /** Argument amount */
        private int amount;

        /** Initialize this instance. */
        public TestUpdateBankBalance(johnny.JohnnyBank receiver$, int amount) {
            super("updateBankBalance"+ ":" + amount);
            this.receiver$ = receiver$;
            this.amount = amount;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.updateBankBalance(amount);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'updateBankBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument amount: " + this.amount;
            return msg;
        }
    }

    /** Add tests for the addCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAddCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("addCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("addCard", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"addCard\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyBank receiver$
                    = (johnny.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestAddCard(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the addCard method. */
    protected static class TestAddCard extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestAddCard(johnny.JohnnyBank receiver$) {
            super("addCard");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.addCard();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'addCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the unlockCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestUnlockCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("unlockCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("unlockCard", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"unlockCard\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnny_JohnnyCard$1$iter
                    = this.vjohnny_JohnnyCardIter("unlockCard", 0);
                this.check_has_data
                    (vjohnny_JohnnyCard$1$iter,
                     "this.vjohnny_JohnnyCardIter(\"unlockCard\", 0)");
                while (!vjohnny_JohnnyCard$1$iter.atEnd()) {
                    final johnny.JohnnyBank receiver$
                        = (johnny.JohnnyBank) receivers$iter.get();
                    final johnny.JohnnyCard card
                        = (johnny.JohnnyCard) vjohnny_JohnnyCard$1$iter.get();
                    methodTests$.addTest
                        (new TestUnlockCard(receiver$, card));
                    vjohnny_JohnnyCard$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the unlockCard method. */
    protected static class TestUnlockCard extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;
        /** Argument card */
        private johnny.JohnnyCard card;

        /** Initialize this instance. */
        public TestUnlockCard(johnny.JohnnyBank receiver$, johnny.JohnnyCard card) {
            super("unlockCard"+ ":" + (card==null? "null" :"{johnny.JohnnyCard}"));
            this.receiver$ = receiver$;
            //this.receiver$.addCard() ;
            this.card = card;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.unlockCard(card);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'unlockCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument card: " + this.card;
            return msg;
        }
    }

    /** Add tests for the updateDailyTotal method
     * to the overall test suite. */
    private void addTestSuiteFor$TestUpdateDailyTotal
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("updateDailyTotal");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("updateDailyTotal", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"updateDailyTotal\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("updateDailyTotal", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"updateDailyTotal\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnny.JohnnyBank receiver$
                        = (johnny.JohnnyBank) receivers$iter.get();
                    final int amount
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestUpdateDailyTotal(receiver$, amount));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the updateDailyTotal method. */
    protected static class TestUpdateDailyTotal extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;
        /** Argument amount */
        private int amount;

        /** Initialize this instance. */
        public TestUpdateDailyTotal(johnny.JohnnyBank receiver$, int amount) {
            super("updateDailyTotal"+ ":" + amount);
            this.receiver$ = receiver$;
            this.amount = amount;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.updateDailyTotal(amount);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'updateDailyTotal' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument amount: " + this.amount;
            return msg;
        }
    }

    /** Add tests for the resetDailyTotal method
     * to the overall test suite. */
    private void addTestSuiteFor$TestResetDailyTotal
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("resetDailyTotal");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnny_JohnnyBankIter("resetDailyTotal", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnny_JohnnyBankIter(\"resetDailyTotal\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnny.JohnnyBank receiver$
                    = (johnny.JohnnyBank) receivers$iter.get();
                methodTests$.addTest
                    (new TestResetDailyTotal(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the resetDailyTotal method. */
    protected static class TestResetDailyTotal extends OneTest {
        /** The receiver */
        private johnny.JohnnyBank receiver$;

        /** Initialize this instance. */
        public TestResetDailyTotal(johnny.JohnnyBank receiver$) {
            super("resetDailyTotal");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.resetDailyTotal();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'resetDailyTotal' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
