#include "MidiRecorder.h"

namespace audio
{
    
MidiRecorder::MidiRecorder() {
    
   
}

MidiRecorder::~MidiRecorder() {}

bool MidiRecorder::openFile(int noTracks) {
    
    return true;
}

bool MidiRecorder::openFile(string fileName, int noTracks) {
    
    return false;
}

bool MidiRecorder::closeFile() {
    myFile_.open("writeFile.mid", ios::out | ios::binary);
    if( !myFile_.is_open() )
    {
        return false;
    }
    
    /*header chunk looks like: 
      4D 54 68 64 (MThd) 00 00 00 06 (FIXED) ff ff nn nn dd dd
      # ff ff is the file format. There are 3 formats:
        (0 - single-track; 1 - multiple tracks, synchronous; 2 - multiple tracks, asynchronous
      # nn nn is the number of tracks in the midi file.
      # dd dd is the number of delta-time ticks per quarter note. 
    */
    const char header_first[8] = { 'M', 'T', 'h', 'd', 0, 0, 0, 6 };
    myFile_.write(header_first, 8);
    
    char header_second[6] = { 0x00, 0x01, 0x00, 0x02, 0x00, 0xF0 }; 
    myFile_.write(header_second, 6);
    
    /*track chunks, header:
      4D 54 72 6B (MTrk) xx xx xx xx (lenght of track not including header in bytes) 
     */
    const char track_header[8] = { 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x1C};
    const char end_of_track[4] = {0x00, 0xFF, 0x2F, 0x00};//absolutely necessary
    char time_signature[8] = {0x00, 0xFF, 0x58, 0x04, 0x04, 0x02, 0x18, 0x08};//opt 
    char tempo[6] = {0x00, 0xFF, 0x51, 0x03, 0x07, 0xA1};//opt 
    char smpte_offset[9] = {0x00, 0xFF, 0x54, 0x05, 0x40, 0x00, 0x00, 0x00, 0x00};//opt
    //char track_name[8] = {0x00, 0xFF, 0x03, 0x04 , 't', 'e', 's', 't'};//opt
    /*00 FF 58 04 04 02 18 08 //time signature
    00 FF 51 03 07 A1 //set tempo
    00 FF 54 05 40 00 00 00 00 //SMPTE offset
    00 FF 2F 00 //end of track*/
    
    //Write first track:
    myFile_.write(track_header, 8*sizeof(char));
    
    //count bytes in track from here:
    myFile_.write(time_signature, 8);
    myFile_.write(tempo, 6);
    myFile_.write(smpte_offset, 9);
    myFile_.write(end_of_track, 4);
    
    
    //write second track:
    const char track_header_two[8] = { 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0xBE};
    char notes[190] = {0x00, 0xC9, 0x00 , 0x00 , 0xB9 , 0x07 , 0x7F , 0x00 , 0x99 , 0x24 , 0x61
        , 0x3D , 0x89 , 0x24 , 0x40 , 0x81 , 0x33 , 0x99 , 0x26 , 0x5E , 0x78 , 0x99 , 0x24 , 0x5E
        , 0x01 , 0x89 , 0x26 , 0x40 , 0x81 , 0x1A , 0x89 , 0x24 , 0x40 , 0x55 , 0x99 , 0x24 , 0x5E
        , 0x4D , 0x89 , 0x24 , 0x40 , 0x2B , 0x99 , 0x26 , 0x65 , 0x66 , 0x89 , 0x26 , 0x40 , 0x81 
        , 0x99 , 0x24 , 0x5A , 0x4E , 0x89 , 0x24 , 0x40 , 0x81 , 0x22 , 0x99 , 0x26 , 0x63 , 0x78
        , 0x99 , 0x24 , 0x58 , 0x02 , 0x89 , 0x26 , 0x40 , 0x81 , 0x38 , 0x89 , 0x24 , 0x40 , 0x36
        , 0x99 , 0x24 , 0x5E , 0x6E , 0x89 , 0x24 , 0x40 , 0x99 , 0x26 , 0x61 , 0x67 , 0x89 , 0x26
        , 0x40 , 0x11 , 0x99 , 0x24 , 0x4F , 0x2D , 0x89 , 0x24 , 0x40 , 0x4B , 0x99 , 0x24 , 0x65
        , 0x54 , 0x89 , 0x24 , 0x40 , 0x81 , 0x1C , 0x99 , 0x26 , 0x5E , 0x78 , 0x99 , 0x24 , 0x61
        , 0x02 , 0x89 , 0x26 , 0x40 , 0x81 , 0x11 , 0x89 , 0x24 , 0x40 , 0x5D , 0x99 , 0x24 , 0x63
        , 0x41 , 0x89 , 0x24 , 0x40 , 0x37 , 0x99 , 0x26 , 0x65 , 0x61 , 0x89 , 0x26 , 0x40 , 0x81 
        , 0x0F , 0x99 , 0x24 , 0x65 , 0x53 , 0x89 , 0x24 , 0x40 , 0x81 , 0x1D , 0x99 , 0x26 , 0x63
        , 0x78 , 0x99 , 0x24 , 0x61 , 0x01 , 0x89 , 0x26 , 0x40 , 0x81 , 0x2C , 0x89 , 0x24 , 0x40
        , 0x43 , 0x99 , 0x24 , 0x5E , 0x3B , 0x89 , 0x24 , 0x40 , 0x3D , 0x99 , 0x26 , 0x65 , 0x47
        , 0x89 , 0x26 , 0x40 , 0x81 , 0x28 , 0xFF , 0x2F , 0x00 , 0x00 , 0x00}; 
    /*
    
    char test0[3] = {0x00, 0xC9, 0x00};
    char test1[4] = {0x00, 0xB9, 0x07, 0x7F};
    char test2[4] = {0x00, 0x99, 0x24, 0x61};
    char test3[4] = {0x3D, 0x89, 0x24, 0x40};
*/
    //myFile_.write(track_header_two, 8);
    //myFile_.write(notes, 190);   
    /*
    0 C0 5 Ch. 1, Program Change 
    5 0 C0 5 Ch. 1, Program Change 
    5 0 C1 46 Ch. 2, Program Change 
    46 0 C2 70 Ch. 3, Program Change 
    70 0 92 48 96 Ch. 3 Note On C2, forte 
    0 92 60 96 Ch. 3 Note On C3, forte 
    96 91 67 64 Ch. 2 Note On G3, mezzo-forte 
    96 90 76 32 Ch. 1 Note On E4, piano 
    192 82 48 64 Ch. 3 Note Off C2, standard 
    0 82 60 64 Ch. 3 Note Off C3, standard 
    0 81 67 64 Ch. 2 Note Off G3, standard 
    0 80 76 64 Ch. 1 Note Off E4, standard
    */
    //myFile_.write((char*)&trackOne_[0], 64);//actual data
    myFile_.close();
    return true;
}

bool MidiRecorder::write(vector<uchar> event, int trackNo) {
    //add delta time, need to know if it's a NOTE ON/OFF, these have to be equally spaced use the 72 as set for length of quarter note,
    //the rest can have delta time 0
    if (event[0] < 160 && event[0] >= 144)//NOTE ON
        trackOne_.push_back(72);
    else if (event[0] < 143 && event[0] >= 128)//NOTE OFF
        trackOne_.push_back(72);
    else
        trackOne_.push_back(0);
        
        
    //add midi event data:
    for (uchar i = 0; i < event.size(); i++)
        trackOne_.push_back(event[i]); 
    
    return true;
}



    
    
}
