Graphics
------------------
The Graphics component looks after the rendering of the terrain/environment, the game objects and the particle system/weather to the screen. Its is the software embodiment of the hardware graphics device. Everytime a Game Object needs to draw it sends the information about its vertices to the Graphics component so that the object may be rendered to the screen. In this regard, everything (Objects/Terrain/Particle/&c.) that needs to be rendered needs to be able to communicate with the Graphics component.

Terrain
------------------
The Terrain component is responsible for reading in static map files and using the colour values of each pixel to 1) determine the height of each vertex on the terrain, as well as 2) determining what type of Game Object may be positioned there. The Terrain component renders the 3D terrain to the screen by passing its vertex information to the Graphics component. The Terrain will also allow in game manipulations/deformations of its vertices to dynamically change the shape of the terrain allowing water to gather in different parts of the terrain.

Pathfinding
------------------
The Pathfinding component deterministically determine paths for game objects to traverse to get from their current position to a defined target position on the Terrain. The componant needs to carry this operation out deterministically so as two, or more, instances of the game connected using the Network component don't need to continuously send position data back and forth, but rather send the Pathfinding component the required information over the Network to compute the same path on both instances.

Networking
------------------
The networking component sends updates between players to keep the environment in sync in both games. It tries to minimise the amount of data that needs to be transferred by only sending signifigant events; when a unit attacks an enemy, when a unit changes destination, etc.

Audio
------------------
The audio component allows other components to trigger sound events. Both the menu state and the game state also play a continuous looping soundtrack.

Game Objects
------------------
Game objects represent entities in the game, whether player controllable units or inanimate objects like trees. They are contained within a state, and when that state is updated each game object sends its vertex information to the Graphics component to be rendered on screen.

Input
------------------
The input component allows the binding of game commands to arbitrary buttons on a keyboard or mouse and provides functionality to check if a key bound to a command is being pressed. This allows an abstraction between the game and the computer's actual hardware. The input must be polled once each game update to retrieve the current state of the eys from hardware. This state is stored and used until the next time the input is polled. Users of the class can ask is a game command key down and retrieve the mouse's position.

State Manager
------------------
The state mangement component takes care of which state to update and render and changing between game states. The state manager can be thought of as a stack onto which states can be pushed or popped. The state on top of the stack it the current game state; the state that is updated and rendered each game loop. This component is responsible for polling the input to ensure it has the most recent key states.

Core
------------------
The entry point to the game. This component is managed by the XNA framework and is  responsible for initializing the game and deciding when to update the game's logic and rendering  the game. This component handles the state manager.