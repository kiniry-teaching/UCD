// This file was generated by jmlunit on Sun May 10 22:14:55 BST 2009.

package tests;

import cashsystem.*;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JohnnyMachine. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JohnnyMachine.java
 * </pre>
 * to regenerate this class whenever JohnnyMachine.java changes.
 */
public class JohnnyMachine_JML_Test
     extends JohnnyMachine_JML_TestData
{
    /** Initialize this class. */
    public JohnnyMachine_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JohnnyMachine
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JohnnyMachine"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JohnnyMachine.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JohnnyMachine_JML_Test testobj
            = new JohnnyMachine_JML_Test("JohnnyMachine_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JohnnyMachine_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JohnnyMachine_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JohnnyMachine.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJohnnyMachine(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetJohnnyCardBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetJohnnyCardTransactions(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestInsertCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRemoveCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestEnterPIN(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsPinValid(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestTopupCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestLodgeToBank(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCardInserted(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCardIsLocked(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCardBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCardBankBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JohnnyMachine contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJohnnyMachine
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JohnnyMachine");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vjava_lang_String$1$iter
                = this.vjava_lang_StringIter("JohnnyMachine", 1);
            this.check_has_data
                (vjava_lang_String$1$iter,
                 "this.vjava_lang_StringIter(\"JohnnyMachine\", 1)");
            while (!vjava_lang_String$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vcashsystem_JohnnyBank$2$iter
                    = this.vcashsystem_JohnnyBankIter("JohnnyMachine", 0);
                this.check_has_data
                    (vcashsystem_JohnnyBank$2$iter,
                     "this.vcashsystem_JohnnyBankIter(\"JohnnyMachine\", 0)");
                while (!vcashsystem_JohnnyBank$2$iter.atEnd()) {
                    final java.lang.String loc
                        = (java.lang.String) vjava_lang_String$1$iter.get();
                    final cashsystem.JohnnyBank bank
                        = (cashsystem.JohnnyBank) vcashsystem_JohnnyBank$2$iter.get();
                    methodTests$.addTest
                        (new TestJohnnyMachine(loc, bank));
                    vcashsystem_JohnnyBank$2$iter.advance();
                }
                vjava_lang_String$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JohnnyMachine contructor. */
    protected static class TestJohnnyMachine extends OneTest {
        /** Argument loc */
        private java.lang.String loc;
        /** Argument bank */
        private cashsystem.JohnnyBank bank;

        /** Initialize this instance. */
        public TestJohnnyMachine(java.lang.String loc, cashsystem.JohnnyBank bank) {
            super("JohnnyMachine"+ ":" + (loc==null? "null" :("\""+loc+"\""))+ "," +(bank==null? "null" :"{cashsystem.JohnnyBank}"));
            this.loc = loc;
            this.bank = bank;
        }

        protected void doCall() throws java.lang.Throwable {
            new JohnnyMachine(loc, bank);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JohnnyMachine' applied to";
            msg += "\n\tArgument loc: " + this.loc;
            msg += "\n\tArgument bank: " + this.bank;
            return msg;
        }
    }

    /** Add tests for the getJohnnyCardBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetJohnnyCardBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getJohnnyCardBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("getJohnnyCardBalance", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"getJohnnyCardBalance\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyMachine receiver$
                    = (cashsystem.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetJohnnyCardBalance(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getJohnnyCardBalance method. */
    protected static class TestGetJohnnyCardBalance extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestGetJohnnyCardBalance(cashsystem.JohnnyMachine receiver$) {
            super("getJohnnyCardBalance");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getJohnnyCardBalance();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getJohnnyCardBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getJohnnyCardTransactions method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetJohnnyCardTransactions
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getJohnnyCardTransactions");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("getJohnnyCardTransactions", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"getJohnnyCardTransactions\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyMachine receiver$
                    = (cashsystem.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetJohnnyCardTransactions(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getJohnnyCardTransactions method. */
    protected static class TestGetJohnnyCardTransactions extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestGetJohnnyCardTransactions(cashsystem.JohnnyMachine receiver$) {
            super("getJohnnyCardTransactions");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getJohnnyCardTransactions();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getJohnnyCardTransactions' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the insertCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestInsertCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("insertCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("insertCard", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"insertCard\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vcashsystem_JohnnyCard$1$iter
                    = this.vcashsystem_JohnnyCardIter("insertCard", 0);
                this.check_has_data
                    (vcashsystem_JohnnyCard$1$iter,
                     "this.vcashsystem_JohnnyCardIter(\"insertCard\", 0)");
                while (!vcashsystem_JohnnyCard$1$iter.atEnd()) {
                    final cashsystem.JohnnyMachine receiver$
                        = (cashsystem.JohnnyMachine) receivers$iter.get();
                    final cashsystem.JohnnyCard card
                        = (cashsystem.JohnnyCard) vcashsystem_JohnnyCard$1$iter.get();
                    methodTests$.addTest
                        (new TestInsertCard(receiver$, card));
                    vcashsystem_JohnnyCard$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the insertCard method. */
    protected static class TestInsertCard extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;
        /** Argument card */
        private cashsystem.JohnnyCard card;

        /** Initialize this instance. */
        public TestInsertCard(cashsystem.JohnnyMachine receiver$, cashsystem.JohnnyCard card) {
            super("insertCard"+ ":" + (card==null? "null" :"{cashsystem.JohnnyCard}"));
            this.receiver$ = receiver$;
            this.card = card;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.insertCard(card);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'insertCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument card: " + this.card;
            return msg;
        }
    }

    /** Add tests for the removeCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRemoveCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("removeCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("removeCard", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"removeCard\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyMachine receiver$
                    = (cashsystem.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestRemoveCard(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the removeCard method. */
    protected static class TestRemoveCard extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestRemoveCard(cashsystem.JohnnyMachine receiver$) {
            super("removeCard");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.removeCard();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'removeCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the enterPIN method
     * to the overall test suite. */
    private void addTestSuiteFor$TestEnterPIN
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("enterPIN");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("enterPIN", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"enterPIN\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("enterPIN", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"enterPIN\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final cashsystem.JohnnyMachine receiver$
                        = (cashsystem.JohnnyMachine) receivers$iter.get();
                    final int pin
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestEnterPIN(receiver$, pin));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the enterPIN method. */
    protected static class TestEnterPIN extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;
        /** Argument pin */
        private int pin;

        /** Initialize this instance. */
        public TestEnterPIN(cashsystem.JohnnyMachine receiver$, int pin) {
            super("enterPIN"+ ":" + pin);
            this.receiver$ = receiver$;
            this.pin = pin;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.enterPIN(pin);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'enterPIN' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument pin: " + this.pin;
            return msg;
        }
    }

    /** Add tests for the isPinValid method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsPinValid
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isPinValid");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("isPinValid", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"isPinValid\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyMachine receiver$
                    = (cashsystem.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsPinValid(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isPinValid method. */
    protected static class TestIsPinValid extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestIsPinValid(cashsystem.JohnnyMachine receiver$) {
            super("isPinValid");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isPinValid();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isPinValid' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the topupCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestTopupCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("topupCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("topupCard", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"topupCard\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("topupCard", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"topupCard\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final cashsystem.JohnnyMachine receiver$
                        = (cashsystem.JohnnyMachine) receivers$iter.get();
                    final int amount
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestTopupCard(receiver$, amount));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the topupCard method. */
    protected static class TestTopupCard extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;
        /** Argument amount */
        private int amount;

        /** Initialize this instance. */
        public TestTopupCard(cashsystem.JohnnyMachine receiver$, int amount) {
            super("topupCard"+ ":" + amount);
            this.receiver$ = receiver$;
            this.amount = amount;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.topupCard(amount);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'topupCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument amount: " + this.amount;
            return msg;
        }
    }

    /** Add tests for the lodgeToBank method
     * to the overall test suite. */
    private void addTestSuiteFor$TestLodgeToBank
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("lodgeToBank");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("lodgeToBank", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"lodgeToBank\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("lodgeToBank", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"lodgeToBank\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final cashsystem.JohnnyMachine receiver$
                        = (cashsystem.JohnnyMachine) receivers$iter.get();
                    final int amount
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestLodgeToBank(receiver$, amount));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the lodgeToBank method. */
    protected static class TestLodgeToBank extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;
        /** Argument amount */
        private int amount;

        /** Initialize this instance. */
        public TestLodgeToBank(cashsystem.JohnnyMachine receiver$, int amount) {
            super("lodgeToBank"+ ":" + amount);
            this.receiver$ = receiver$;
            this.amount = amount;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.lodgeToBank(amount);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'lodgeToBank' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument amount: " + this.amount;
            return msg;
        }
    }

    /** Add tests for the cardInserted method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCardInserted
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("cardInserted");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("cardInserted", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"cardInserted\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyMachine receiver$
                    = (cashsystem.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestCardInserted(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the cardInserted method. */
    protected static class TestCardInserted extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestCardInserted(cashsystem.JohnnyMachine receiver$) {
            super("cardInserted");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.cardInserted();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'cardInserted' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the cardIsLocked method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCardIsLocked
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("cardIsLocked");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("cardIsLocked", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"cardIsLocked\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyMachine receiver$
                    = (cashsystem.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestCardIsLocked(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the cardIsLocked method. */
    protected static class TestCardIsLocked extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestCardIsLocked(cashsystem.JohnnyMachine receiver$) {
            super("cardIsLocked");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.cardIsLocked();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'cardIsLocked' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getCardBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCardBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCardBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("getCardBalance", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"getCardBalance\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyMachine receiver$
                    = (cashsystem.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCardBalance(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCardBalance method. */
    protected static class TestGetCardBalance extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestGetCardBalance(cashsystem.JohnnyMachine receiver$) {
            super("getCardBalance");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCardBalance();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCardBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getCardBankBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCardBankBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCardBankBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vcashsystem_JohnnyMachineIter("getCardBankBalance", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vcashsystem_JohnnyMachineIter(\"getCardBankBalance\", 0))");
            while (!receivers$iter.atEnd()) {
                final cashsystem.JohnnyMachine receiver$
                    = (cashsystem.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCardBankBalance(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCardBankBalance method. */
    protected static class TestGetCardBankBalance extends OneTest {
        /** The receiver */
        private cashsystem.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestGetCardBankBalance(cashsystem.JohnnyMachine receiver$) {
            super("getCardBankBalance");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCardBankBalance();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCardBankBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
