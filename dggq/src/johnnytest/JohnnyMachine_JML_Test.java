// This file was generated by jmlunit on Fri May 01 16:01:38 BST 2009.

package johnnytest;

import johnnycash.JohnnyMachine;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JohnnyMachine. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JohnnyMachine.java
 * </pre>
 * to regenerate this class whenever JohnnyMachine.java changes.
 */
public class JohnnyMachine_JML_Test
     extends JohnnyMachine_JML_TestData
{
    /** Initialize this class. */
    public JohnnyMachine_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JohnnyMachine
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JohnnyMachine"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JohnnyMachine.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JohnnyMachine_JML_Test testobj
            = new JohnnyMachine_JML_Test("JohnnyMachine_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JohnnyMachine_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JohnnyMachine_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JohnnyMachine.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJohnnyMachine(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetBankBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCardBalance(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetJohnnyCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetJohnnyCard(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTerminalId(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetTerminalId(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetLocked(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsPinValid(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestValidatePin(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetPin(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestTransferFunds(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCreateTransaction(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCreateOwnTransaction(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetJohnnyBank(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetJohnnyBank(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JohnnyMachine contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJohnnyMachine
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JohnnyMachine");
        try {
            methodTests$.addTest
                (new TestJohnnyMachine());
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JohnnyMachine contructor. */
    protected static class TestJohnnyMachine extends OneTest {

        /** Initialize this instance. */
        public TestJohnnyMachine() {
            super("JohnnyMachine");
        }

        protected void doCall() throws java.lang.Throwable {
            new JohnnyMachine();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JohnnyMachine'";
            return msg;
        }
    }

    /** Add tests for the getBankBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetBankBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getBankBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("getBankBalance", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"getBankBalance\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyMachine receiver$
                    = (johnnycash.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetBankBalance(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getBankBalance method. */
    protected static class TestGetBankBalance extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestGetBankBalance(johnnycash.JohnnyMachine receiver$) {
            super("getBankBalance");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getBankBalance();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getBankBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getCardBalance method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCardBalance
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCardBalance");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("getCardBalance", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"getCardBalance\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyMachine receiver$
                    = (johnnycash.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCardBalance(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCardBalance method. */
    protected static class TestGetCardBalance extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestGetCardBalance(johnnycash.JohnnyMachine receiver$) {
            super("getCardBalance");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCardBalance();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCardBalance' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getJohnnyCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetJohnnyCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getJohnnyCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("getJohnnyCard", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"getJohnnyCard\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyMachine receiver$
                    = (johnnycash.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetJohnnyCard(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getJohnnyCard method. */
    protected static class TestGetJohnnyCard extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestGetJohnnyCard(johnnycash.JohnnyMachine receiver$) {
            super("getJohnnyCard");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getJohnnyCard();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getJohnnyCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setJohnnyCard method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetJohnnyCard
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setJohnnyCard");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("setJohnnyCard", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"setJohnnyCard\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnnycash_JohnnyCard$1$iter
                    = this.vjohnnycash_JohnnyCardIter("setJohnnyCard", 0);
                this.check_has_data
                    (vjohnnycash_JohnnyCard$1$iter,
                     "this.vjohnnycash_JohnnyCardIter(\"setJohnnyCard\", 0)");
                while (!vjohnnycash_JohnnyCard$1$iter.atEnd()) {
                    final johnnycash.JohnnyMachine receiver$
                        = (johnnycash.JohnnyMachine) receivers$iter.get();
                    final johnnycash.JohnnyCard card
                        = (johnnycash.JohnnyCard) vjohnnycash_JohnnyCard$1$iter.get();
                    methodTests$.addTest
                        (new TestSetJohnnyCard(receiver$, card));
                    vjohnnycash_JohnnyCard$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setJohnnyCard method. */
    protected static class TestSetJohnnyCard extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;
        /** Argument card */
        private johnnycash.JohnnyCard card;

        /** Initialize this instance. */
        public TestSetJohnnyCard(johnnycash.JohnnyMachine receiver$, johnnycash.JohnnyCard card) {
            super("setJohnnyCard"+ ":" + (card==null? "null" :"{johnnycash.JohnnyCard}"));
            this.receiver$ = receiver$;
            this.card = card;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setJohnnyCard(card);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setJohnnyCard' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument card: " + this.card;
            return msg;
        }
    }

    /** Add tests for the getTerminalId method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTerminalId
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTerminalId");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("getTerminalId", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"getTerminalId\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyMachine receiver$
                    = (johnnycash.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetTerminalId(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTerminalId method. */
    protected static class TestGetTerminalId extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestGetTerminalId(johnnycash.JohnnyMachine receiver$) {
            super("getTerminalId");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTerminalId();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTerminalId' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setTerminalId method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetTerminalId
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setTerminalId");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("setTerminalId", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"setTerminalId\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("setTerminalId", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"setTerminalId\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyMachine receiver$
                        = (johnnycash.JohnnyMachine) receivers$iter.get();
                    final int theTerminalId
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestSetTerminalId(receiver$, theTerminalId));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setTerminalId method. */
    protected static class TestSetTerminalId extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;
        /** Argument theTerminalId */
        private int theTerminalId;

        /** Initialize this instance. */
        public TestSetTerminalId(johnnycash.JohnnyMachine receiver$, int theTerminalId) {
            super("setTerminalId"+ ":" + theTerminalId);
            this.receiver$ = receiver$;
            this.theTerminalId = theTerminalId;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setTerminalId(theTerminalId);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setTerminalId' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theTerminalId: " + this.theTerminalId;
            return msg;
        }
    }

    /** Add tests for the setLocked method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetLocked
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setLocked");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("setLocked", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"setLocked\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyMachine receiver$
                    = (johnnycash.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestSetLocked(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setLocked method. */
    protected static class TestSetLocked extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestSetLocked(johnnycash.JohnnyMachine receiver$) {
            super("setLocked");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setLocked();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setLocked' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isPinValid method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsPinValid
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isPinValid");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("isPinValid", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"isPinValid\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyMachine receiver$
                    = (johnnycash.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsPinValid(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isPinValid method. */
    protected static class TestIsPinValid extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestIsPinValid(johnnycash.JohnnyMachine receiver$) {
            super("isPinValid");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isPinValid();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isPinValid' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the validatePin method
     * to the overall test suite. */
    private void addTestSuiteFor$TestValidatePin
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("validatePin");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("validatePin", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"validatePin\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("validatePin", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"validatePin\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyMachine receiver$
                        = (johnnycash.JohnnyMachine) receivers$iter.get();
                    final int pin
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestValidatePin(receiver$, pin));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the validatePin method. */
    protected static class TestValidatePin extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;
        /** Argument pin */
        private int pin;

        /** Initialize this instance. */
        public TestValidatePin(johnnycash.JohnnyMachine receiver$, int pin) {
            super("validatePin"+ ":" + pin);
            this.receiver$ = receiver$;
            this.pin = pin;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.validatePin(pin);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'validatePin' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument pin: " + this.pin;
            return msg;
        }
    }

    /** Add tests for the setPin method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetPin
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setPin");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("setPin", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"setPin\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("setPin", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"setPin\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyMachine receiver$
                        = (johnnycash.JohnnyMachine) receivers$iter.get();
                    final int thePin
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestSetPin(receiver$, thePin));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setPin method. */
    protected static class TestSetPin extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;
        /** Argument thePin */
        private int thePin;

        /** Initialize this instance. */
        public TestSetPin(johnnycash.JohnnyMachine receiver$, int thePin) {
            super("setPin"+ ":" + thePin);
            this.receiver$ = receiver$;
            this.thePin = thePin;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setPin(thePin);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setPin' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument thePin: " + this.thePin;
            return msg;
        }
    }

    /** Add tests for the transferFunds method
     * to the overall test suite. */
    private void addTestSuiteFor$TestTransferFunds
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("transferFunds");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("transferFunds", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"transferFunds\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("transferFunds", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"transferFunds\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyMachine receiver$
                        = (johnnycash.JohnnyMachine) receivers$iter.get();
                    final int funds
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestTransferFunds(receiver$, funds));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the transferFunds method. */
    protected static class TestTransferFunds extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;
        /** Argument funds */
        private int funds;

        /** Initialize this instance. */
        public TestTransferFunds(johnnycash.JohnnyMachine receiver$, int funds) {
            super("transferFunds"+ ":" + funds);
            this.receiver$ = receiver$;
            this.funds = funds;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.transferFunds(funds);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'transferFunds' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument funds: " + this.funds;
            return msg;
        }
    }

    /** Add tests for the createTransaction method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCreateTransaction
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("createTransaction");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("createTransaction", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"createTransaction\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnnycash_JohnnyTransaction$1$iter
                    = this.vjohnnycash_JohnnyTransactionIter("createTransaction", 0);
                this.check_has_data
                    (vjohnnycash_JohnnyTransaction$1$iter,
                     "this.vjohnnycash_JohnnyTransactionIter(\"createTransaction\", 0)");
                while (!vjohnnycash_JohnnyTransaction$1$iter.atEnd()) {
                    final johnnycash.JohnnyMachine receiver$
                        = (johnnycash.JohnnyMachine) receivers$iter.get();
                    final johnnycash.JohnnyTransaction theTransaction
                        = (johnnycash.JohnnyTransaction) vjohnnycash_JohnnyTransaction$1$iter.get();
                    methodTests$.addTest
                        (new TestCreateTransaction(receiver$, theTransaction));
                    vjohnnycash_JohnnyTransaction$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the createTransaction method. */
    protected static class TestCreateTransaction extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;
        /** Argument theTransaction */
        private johnnycash.JohnnyTransaction theTransaction;

        /** Initialize this instance. */
        public TestCreateTransaction(johnnycash.JohnnyMachine receiver$, johnnycash.JohnnyTransaction theTransaction) {
            super("createTransaction"+ ":" + (theTransaction==null? "null" :"{johnnycash.JohnnyTransaction}"));
            this.receiver$ = receiver$;
            this.theTransaction = theTransaction;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.createTransaction(theTransaction);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'createTransaction' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theTransaction: " + this.theTransaction;
            return msg;
        }
    }

    /** Add tests for the createOwnTransaction method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCreateOwnTransaction
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("createOwnTransaction");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("createOwnTransaction", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"createOwnTransaction\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("createOwnTransaction", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"createOwnTransaction\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final johnnycash.JohnnyMachine receiver$
                        = (johnnycash.JohnnyMachine) receivers$iter.get();
                    final int funds
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestCreateOwnTransaction(receiver$, funds));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the createOwnTransaction method. */
    protected static class TestCreateOwnTransaction extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;
        /** Argument funds */
        private int funds;

        /** Initialize this instance. */
        public TestCreateOwnTransaction(johnnycash.JohnnyMachine receiver$, int funds) {
            super("createOwnTransaction"+ ":" + funds);
            this.receiver$ = receiver$;
            this.funds = funds;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.createOwnTransaction(funds);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'createOwnTransaction' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument funds: " + this.funds;
            return msg;
        }
    }

    /** Add tests for the getJohnnyBank method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetJohnnyBank
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getJohnnyBank");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("getJohnnyBank", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"getJohnnyBank\", 0))");
            while (!receivers$iter.atEnd()) {
                final johnnycash.JohnnyMachine receiver$
                    = (johnnycash.JohnnyMachine) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetJohnnyBank(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getJohnnyBank method. */
    protected static class TestGetJohnnyBank extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;

        /** Initialize this instance. */
        public TestGetJohnnyBank(johnnycash.JohnnyMachine receiver$) {
            super("getJohnnyBank");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getJohnnyBank();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getJohnnyBank' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setJohnnyBank method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetJohnnyBank
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setJohnnyBank");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vjohnnycash_JohnnyMachineIter("setJohnnyBank", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vjohnnycash_JohnnyMachineIter(\"setJohnnyBank\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjohnnycash_JohnnyBank$1$iter
                    = this.vjohnnycash_JohnnyBankIter("setJohnnyBank", 0);
                this.check_has_data
                    (vjohnnycash_JohnnyBank$1$iter,
                     "this.vjohnnycash_JohnnyBankIter(\"setJohnnyBank\", 0)");
                while (!vjohnnycash_JohnnyBank$1$iter.atEnd()) {
                    final johnnycash.JohnnyMachine receiver$
                        = (johnnycash.JohnnyMachine) receivers$iter.get();
                    final johnnycash.JohnnyBank theJohnnyBank
                        = (johnnycash.JohnnyBank) vjohnnycash_JohnnyBank$1$iter.get();
                    methodTests$.addTest
                        (new TestSetJohnnyBank(receiver$, theJohnnyBank));
                    vjohnnycash_JohnnyBank$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setJohnnyBank method. */
    protected static class TestSetJohnnyBank extends OneTest {
        /** The receiver */
        private johnnycash.JohnnyMachine receiver$;
        /** Argument theJohnnyBank */
        private johnnycash.JohnnyBank theJohnnyBank;

        /** Initialize this instance. */
        public TestSetJohnnyBank(johnnycash.JohnnyMachine receiver$, johnnycash.JohnnyBank theJohnnyBank) {
            super("setJohnnyBank"+ ":" + (theJohnnyBank==null? "null" :"{johnnycash.JohnnyBank}"));
            this.receiver$ = receiver$;
            this.theJohnnyBank = theJohnnyBank;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setJohnnyBank(theJohnnyBank);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setJohnnyBank' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument theJohnnyBank: " + this.theJohnnyBank;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
